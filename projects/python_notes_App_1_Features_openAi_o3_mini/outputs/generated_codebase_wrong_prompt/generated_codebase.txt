b'PK\x03\x04\x14\x00\x00\x00\x00\x00\xe5~*[x\x8b!f\x02\x01\x00\x00\x02\x01\x00\x00\x07\x00\x00\x00main.pyfrom db import init_db\nfrom app import NoteApp\n\n\ndef main():\n    # Initialize the database (creates tables if not exist)\n    init_db()\n    \n    # Start the Note Taking Application\n    app = NoteApp()\n    app.mainloop()\n\n\nif __name__ == \'__main__\':\n    main()PK\x03\x04\x14\x00\x00\x00\x00\x00\xe5~*[\x1b\xbc\xc3d\xd9\x02\x00\x00\xd9\x02\x00\x00\x05\x00\x00\x00db.pyimport sqlite3\nimport os\n\n# Database filename\nDB_NAME = \'notes.db\'\n\n\ndef init_db():\n    """\n    Initialize the SQLite database and create the necessary tables if they do not already exist.\n    """\n    connection = sqlite3.connect(DB_NAME)\n    cursor = connection.cursor()\n    \n    # Create the notes table with required fields\n    cursor.execute(\'\'\'\n        CREATE TABLE IF NOT EXISTS notes (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            title TEXT NOT NULL,\n            content TEXT NOT NULL,\n            created_at TEXT NOT NULL,\n            updated_at TEXT NOT NULL\n        )\n    \'\'\')\n    connection.commit()\n    connection.close()\n\n\nif __name__ == \'__main__\':\n    init_db()\n    print("Database initialized.")PK\x03\x04\x14\x00\x00\x00\x00\x00\xe5~*[\xcd\xe4\x9c\x11\xd2\t\x00\x00\xd2\t\x00\x00\r\x00\x00\x00note_model.pyimport sqlite3\nimport datetime\nfrom db import DB_NAME\n\n\nclass Note:\n    def __init__(self, id, title, content, created_at, updated_at):\n        self.id = id\n        self.title = title\n        self.content = content\n        self.created_at = created_at\n        self.updated_at = updated_at\n\n    @staticmethod\n    def create(title, content):\n        """\n        Create a new note with the provided title and content. Required fields are validated in the UI.\n        """\n        now = datetime.datetime.now().isoformat()\n        connection = sqlite3.connect(DB_NAME)\n        cursor = connection.cursor()\n        cursor.execute(\n            "INSERT INTO notes (title, content, created_at, updated_at) VALUES (?, ?, ?, ?)",\n            (title, content, now, now)\n        )\n        connection.commit()\n        connection.close()\n\n    @staticmethod\n    def get_all():\n        """\n        Retrieve all notes from the database.\n        """\n        connection = sqlite3.connect(DB_NAME)\n        cursor = connection.cursor()\n        cursor.execute("SELECT id, title, content, created_at, updated_at FROM notes")\n        rows = cursor.fetchall()\n        connection.close()\n        return [Note(*row) for row in rows]\n\n    @staticmethod\n    def get_by_id(note_id):\n        """\n        Retrieve a note by its unique identifier.\n        """\n        connection = sqlite3.connect(DB_NAME)\n        cursor = connection.cursor()\n        cursor.execute("SELECT id, title, content, created_at, updated_at FROM notes WHERE id = ?", (note_id,))\n        row = cursor.fetchone()\n        connection.close()\n        if row:\n            return Note(*row)\n        return None\n\n    @staticmethod\n    def update(note_id, title, content):\n        """\n        Update the title and content of an existing note and refresh the updated_at timestamp.\n        """\n        now = datetime.datetime.now().isoformat()\n        connection = sqlite3.connect(DB_NAME)\n        cursor = connection.cursor()\n        cursor.execute(\n            "UPDATE notes SET title = ?, content = ?, updated_at = ? WHERE id = ?",\n            (title, content, now, note_id)\n        )\n        connection.commit()\n        connection.close()\n\n    @staticmethod\n    def delete(note_id):\n        """\n        Delete a note from the database by its unique identifier.\n        """\n        connection = sqlite3.connect(DB_NAME)\n        cursor = connection.cursor()\n        cursor.execute("DELETE FROM notes WHERE id = ?", (note_id,))\n        connection.commit()\n        connection.close()PK\x03\x04\x14\x00\x00\x00\x00\x00\xe5~*[\x93\xa8\xf4\xa2\x8a\x17\x00\x00\x8a\x17\x00\x00\x06\x00\x00\x00app.pyimport tkinter as tk\nfrom tkinter import messagebox\nfrom note_model import Note\n\n\nclass NoteApp(tk.Tk):\n    def __init__(self):\n        super().__init__()\n        self.title("Note Taking App")\n        self.geometry("600x400")\n        \n        # Left frame for list of notes\n        self.list_frame = tk.Frame(self)\n        self.list_frame.pack(side=tk.LEFT, fill=tk.Y, padx=5, pady=5)\n\n        self.listbox = tk.Listbox(self.list_frame, width=40)\n        self.listbox.pack(side=tk.LEFT, fill=tk.Y)\n        self.listbox.bind("<<ListboxSelect>>", self.on_note_select)\n\n        # Add a scrollbar for the listbox\n        self.scrollbar = tk.Scrollbar(self.list_frame, orient=tk.VERTICAL)\n        self.scrollbar.config(command=self.listbox.yview)\n        self.listbox.config(yscrollcommand=self.scrollbar.set)\n        self.scrollbar.pack(side=tk.RIGHT, fill=tk.Y)\n        \n        # Right frame for note details and action buttons\n        self.right_frame = tk.Frame(self)\n        self.right_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=5, pady=5)\n        \n        # Text widget to display selected note details\n        self.text = tk.Text(self.right_frame)\n        self.text.pack(fill=tk.BOTH, expand=True)\n        \n        # Frame for action buttons\n        self.button_frame = tk.Frame(self.right_frame)\n        self.button_frame.pack(fill=tk.X, pady=5)\n        \n        self.add_button = tk.Button(self.button_frame, text="Add Note", command=self.open_add_note)\n        self.add_button.pack(side=tk.LEFT, padx=5)\n        \n        self.edit_button = tk.Button(self.button_frame, text="Edit Note", command=self.open_edit_note)\n        self.edit_button.pack(side=tk.LEFT, padx=5)\n\n        self.delete_button = tk.Button(self.button_frame, text="Delete Note", command=self.delete_note)\n        self.delete_button.pack(side=tk.LEFT, padx=5)\n        \n        # Currently selected note id\n        self.selected_note_id = None\n\n        # Load all notes into the listbox\n        self.refresh_notes()\n\n    def refresh_notes(self):\n        """\n        Refresh the list of notes displayed in the listbox.\n        """\n        self.listbox.delete(0, tk.END)\n        notes = Note.get_all()\n        for note in notes:\n            display = f"{note.id}: {note.title} ({note.created_at[:10]})"\n            self.listbox.insert(tk.END, display)\n\n    def on_note_select(self, event):\n        """\n        Handle note selection from the listbox and display its details.\n        """\n        selection = self.listbox.curselection()\n        if selection:\n            index = selection[0]\n            item_text = self.listbox.get(index)\n            # Assume the id is before the colon\n            note_id = int(item_text.split(":")[0])\n            note = Note.get_by_id(note_id)\n            if note:\n                self.selected_note_id = note.id\n                self.text.delete(\'1.0\', tk.END)\n                self.text.insert(tk.END, f"Title: {note.title}\\n")\n                self.text.insert(tk.END, f"Created: {note.created_at}\\n")\n                self.text.insert(tk.END, f"Updated: {note.updated_at}\\n")\n                self.text.insert(tk.END, "\\nContent:\\n")\n                self.text.insert(tk.END, note.content)\n        else:\n            self.selected_note_id = None\n            self.text.delete(\'1.0\', tk.END)\n\n    def open_add_note(self):\n        """ Open the NoteForm for adding a new note. """\n        NoteForm(self, mode="add")\n\n    def open_edit_note(self):\n        """ Open the NoteForm pre-filled with the selected note for editing. """\n        if self.selected_note_id:\n            note = Note.get_by_id(self.selected_note_id)\n            if note:\n                NoteForm(self, mode="edit", note=note)\n        else:\n            messagebox.showinfo("Info", "Please select a note to edit.")\n\n    def delete_note(self):\n        """ Delete the selected note after user confirmation. """\n        if self.selected_note_id:\n            if messagebox.askyesno("Confirm Delete", "Are you sure you want to delete this note?"):\n                Note.delete(self.selected_note_id)\n                self.selected_note_id = None\n                self.refresh_notes()\n                self.text.delete(\'1.0\', tk.END)\n        else:\n            messagebox.showinfo("Info", "Please select a note to delete.")\n\n\nclass NoteForm(tk.Toplevel):\n    def __init__(self, master, mode="add", note=None):\n        super().__init__(master)\n        self.master = master\n        self.mode = mode\n        self.note = note\n        self.title("Add Note" if mode == "add" else "Edit Note")\n\n        # Title input\n        tk.Label(self, text="Title:").pack(pady=5)\n        self.title_entry = tk.Entry(self, width=50)\n        self.title_entry.pack(padx=10)\n\n        # Content input\n        tk.Label(self, text="Content:").pack(pady=5)\n        self.content_text = tk.Text(self, width=50, height=10)\n        self.content_text.pack(padx=10)\n\n        # Save button\n        self.save_button = tk.Button(self, text="Save", command=self.save_note)\n        self.save_button.pack(pady=10)\n\n        # If editing an existing note, populate the fields\n        if self.mode == "edit" and self.note:\n            self.title_entry.insert(0, self.note.title)\n            self.content_text.insert(\'1.0\', self.note.content)\n\n    def save_note(self):\n        """ Validate input and save the note (either create or update). """\n        title = self.title_entry.get().strip()\n        content = self.content_text.get(\'1.0\', tk.END).strip()\n\n        if not title or not content:\n            messagebox.showerror("Error", "Both title and content are required!")\n            return\n\n        if len(title) > 100:\n            messagebox.showerror("Error", "Title must be at most 100 characters long.")\n            return\n\n        if self.mode == "add":\n            Note.create(title, content)\n        elif self.mode == "edit":\n            Note.update(self.note.id, title, content)\n\n        # Refresh the main list and close the form\n        self.master.refresh_notes()\n        self.destroy()PK\x03\x04\x14\x00\x00\x00\x00\x00\xe5~*[\x0f9\x9e\x15[\x01\x00\x00[\x01\x00\x00\x10\x00\x00\x00inputs/goals.txtCreate a simple note-taking app allowing users to create, view, and delete personal notes.\nFeatures:\nBasic UI with a list of notes:\n- Add new notes using a simple form\n- Edit and delete existing notes\n- Store notes locally in a SQLite database\nThe result should be a functional application with a UI, so if necessary, create required config files.PK\x03\x04\x14\x00\x00\x00\x00\x00\xe5~*[\x052\xac\xaa)\x00\x00\x00)\x00\x00\x00\x16\x00\x00\x00inputs/environment.txtTechnology stack: Use Python and Tkinter.PK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\xe5~*[x\x8b!f\x02\x01\x00\x00\x02\x01\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\x00\x00\x00\x00main.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\xe5~*[\x1b\xbc\xc3d\xd9\x02\x00\x00\xd9\x02\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\'\x01\x00\x00db.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\xe5~*[\xcd\xe4\x9c\x11\xd2\t\x00\x00\xd2\t\x00\x00\r\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01#\x04\x00\x00note_model.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\xe5~*[\x93\xa8\xf4\xa2\x8a\x17\x00\x00\x8a\x17\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01 \x0e\x00\x00app.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\xe5~*[\x0f9\x9e\x15[\x01\x00\x00[\x01\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\xce%\x00\x00inputs/goals.txtPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\xe5~*[\x052\xac\xaa)\x00\x00\x00)\x00\x00\x00\x16\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01W\'\x00\x00inputs/environment.txtPK\x05\x06\x00\x00\x00\x00\x06\x00\x06\x00Y\x01\x00\x00\xb4\'\x00\x00\x00\x00'
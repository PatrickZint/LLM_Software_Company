b'PK\x03\x04\x14\x00\x00\x00\x00\x00K\x82G[\xa2\xe9\x828\xb3\x10\x00\x00\xb3\x10\x00\x00\x07\x00\x00\x00main.pyimport tkinter as tk\nfrom tkinter import messagebox, simpledialog\n\nclass NoteTakingApp:\n    def __init__(self, root):\n        self.root = root\n        self.root.title("Simple Note Taking App")\n        self.notes = []  # Each note will be a dict: {\'title\': str, \'content\': str}\n        \n        # Frame for the listbox and scrollbar\n        frame = tk.Frame(root)\n        frame.pack(padx=10, pady=10)\n        \n        self.note_listbox = tk.Listbox(frame, width=50, height=15)\n        self.note_listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)\n\n        scrollbar = tk.Scrollbar(frame, orient=tk.VERTICAL, command=self.note_listbox.yview)\n        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)\n        self.note_listbox.config(yscrollcommand=scrollbar.set)\n\n        # Buttons frame\n        btn_frame = tk.Frame(root)\n        btn_frame.pack(pady=5)\n\n        add_btn = tk.Button(btn_frame, text="Add Note", command=self.add_note)\n        add_btn.grid(row=0, column=0, padx=5)\n\n        edit_btn = tk.Button(btn_frame, text="Edit Note", command=self.edit_note)\n        edit_btn.grid(row=0, column=1, padx=5)\n\n        delete_btn = tk.Button(btn_frame, text="Delete Note", command=self.delete_note)\n        delete_btn.grid(row=0, column=2, padx=5)\n\n        # Bind double-click on listbox to view/edit note\n        self.note_listbox.bind(\'<Double-Button-1>\', lambda event: self.view_note())\n\n    def refresh_notes(self):\n        self.note_listbox.delete(0, tk.END)\n        for note in self.notes:\n            self.note_listbox.insert(tk.END, note[\'title\'])\n\n    def add_note(self):\n        self.open_note_editor()\n\n    def edit_note(self):\n        selected_index = self.get_selected_index()\n        if selected_index is None:\n            messagebox.showwarning("No selection", "Please select a note to edit.")\n            return\n        note = self.notes[selected_index]\n        self.open_note_editor(note, selected_index)\n\n    def delete_note(self):\n        selected_index = self.get_selected_index()\n        if selected_index is None:\n            messagebox.showwarning("No selection", "Please select a note to delete.")\n            return\n        confirm = messagebox.askyesno("Delete Note", "Are you sure you want to delete this note?")\n        if confirm:\n            del self.notes[selected_index]\n            self.refresh_notes()\n\n    def view_note(self):\n        selected_index = self.get_selected_index()\n        if selected_index is None:\n            return\n        note = self.notes[selected_index]\n        messagebox.showinfo(note[\'title\'], note[\'content\'])\n\n    def get_selected_index(self):\n        try:\n            index = self.note_listbox.curselection()[0]\n            return index\n        except IndexError:\n            return None\n\n    def open_note_editor(self, note=None, index=None):\n        editor = tk.Toplevel(self.root)\n        editor.title("Note Editor")\n\n        tk.Label(editor, text="Title:").grid(row=0, column=0, padx=5, pady=5, sticky=tk.W)\n        title_var = tk.StringVar()\n        title_entry = tk.Entry(editor, textvariable=title_var, width=40)\n        title_entry.grid(row=0, column=1, padx=5, pady=5)\n\n        tk.Label(editor, text="Content:").grid(row=1, column=0, padx=5, pady=5, sticky=tk.NW)\n        content_text = tk.Text(editor, width=40, height=10)\n        content_text.grid(row=1, column=1, padx=5, pady=5)\n\n        if note:\n            title_var.set(note[\'title\'])\n            content_text.insert(tk.END, note[\'content\'])\n\n        def save():\n            title = title_var.get().strip()\n            content = content_text.get("1.0", tk.END).strip()\n            if not title:\n                messagebox.showwarning("Input Error", "Title cannot be empty.")\n                return\n            if note is None:\n                # Adding new note\n                self.notes.append({\'title\': title, \'content\': content})\n            else:\n                # Editing existing note\n                self.notes[index] = {\'title\': title, \'content\': content}\n            self.refresh_notes()\n            editor.destroy()\n\n        save_btn = tk.Button(editor, text="Save", command=save)\n        save_btn.grid(row=2, column=1, padx=5, pady=10, sticky=tk.E)\n\nif __name__ == \'__main__\':\n    root = tk.Tk()\n    app = NoteTakingApp(root)\n    root.mainloop()\nPK\x03\x04\x14\x00\x00\x00\x00\x00K\x82G[^\xff\x00\xcc\xe3\x02\x00\x00\xe3\x02\x00\x00\t\x00\x00\x00README.md# Simple Note Taking App\n\nThis is a simple note-taking application built with Python and Tkinter. It allows users to create, view, edit, and delete personal notes.\n\n## Features\n\n- Add a new note with a title and content using a simple form\n- Edit an existing note\n- Delete a note\n- View the full content of a note by double-clicking the note in the list\n\n## How to Run\n\n1. Make sure you have Python installed (version 3.x recommended).\n2. Run the following command in your terminal:\n\n   ```bash\n   python main.py\n   ```\n\n3. The application window will open. Use the buttons to add, edit, delete, or view notes.\n\n## Dependencies\n\nThis application only uses the standard Python library (`tkinter`). No additional installations are required.\nPK\x03\x04\x14\x00\x00\x00\x00\x00K\x82G[\xfb\x94\x89\xc60\x01\x00\x000\x01\x00\x00\x10\x00\x00\x00inputs/goals.txtCreate a simple note-taking app allowing users to create, view, and delete personal notes.\nFeatures:\nBasic UI with a list of notes:\n- Add new notes using a simple form\n- Edit and delete existing notes\nThe result should be a functional application with a UI, so if necessary, create required config files.PK\x03\x04\x14\x00\x00\x00\x00\x00K\x82G[\x052\xac\xaa)\x00\x00\x00)\x00\x00\x00\x16\x00\x00\x00inputs/environment.txtTechnology stack: Use Python and Tkinter.PK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00K\x82G[\xa2\xe9\x828\xb3\x10\x00\x00\xb3\x10\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\x00\x00\x00\x00main.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00K\x82G[^\xff\x00\xcc\xe3\x02\x00\x00\xe3\x02\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\xd8\x10\x00\x00README.mdPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00K\x82G[\xfb\x94\x89\xc60\x01\x00\x000\x01\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\xe2\x13\x00\x00inputs/goals.txtPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00K\x82G[\x052\xac\xaa)\x00\x00\x00)\x00\x00\x00\x16\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01@\x15\x00\x00inputs/environment.txtPK\x05\x06\x00\x00\x00\x00\x04\x00\x04\x00\xee\x00\x00\x00\x9d\x15\x00\x00\x00\x00'
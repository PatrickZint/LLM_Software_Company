b'PK\x03\x04\x14\x00\x00\x00\x00\x00 X*[\xfb\xa5\x05\xb8\x92\x01\x00\x00\x92\x01\x00\x00\t\x00\x00\x00config.py# Configuration file for the Image Diff Tool\n\n# Tolerance threshold for pixel differences (0-255) for each RGB channel\nDEFAULT_TOLERANCE = 10\n\n# Default directories for input and output\nDEFAULT_INPUT_DIR = ""\nDEFAULT_OUTPUT_DIR = "./output"\n\n# Color to use for highlighting differences (in RGB). Red is used by default.\nDEFAULT_DIFF_COLOR = (255, 0, 0)\n\n# Other configuration options can be added here\nPK\x03\x04\x14\x00\x00\x00\x00\x00 X*[\xb9$\x1c\xb1\xbd\x07\x00\x00\xbd\x07\x00\x00\x13\x00\x00\x00image_comparator.pyimport numpy as np\nfrom PIL import Image\nimport cv2\nimport config\n\n\ndef compare_images(image1_path, image2_path, tolerance=config.DEFAULT_TOLERANCE):\n    """\n    Compare two images pixel-by-pixel.\n    If image sizes differ, resize the second image to match the first.\n    Returns a PIL Image object representing the diff image.\n    Pixels that differ beyond the tolerance threshold are highlighted using DEFAULT_DIFF_COLOR.\n\n    :param image1_path: File path for the first image.\n    :param image2_path: File path for the second image.\n    :param tolerance: Tolerance threshold for pixel differences.\n    :return: PIL Image of the diff result.\n    """\n    try:\n        # Load images using PIL and convert to RGB\n        im1 = Image.open(image1_path).convert(\'RGB\')\n        im2 = Image.open(image2_path).convert(\'RGB\')\n    except Exception as e:\n        raise ValueError(f"Error loading images: {e}")\n\n    # If dimensions differ, resize im2 to match im1\'s size\n    if im1.size != im2.size:\n        im2 = im2.resize(im1.size)\n\n    # Convert images to numpy arrays\n    arr1 = np.array(im1).astype(\'int32\')\n    arr2 = np.array(im2).astype(\'int32\')\n    \n    # Calculate absolute difference\n    diff = np.abs(arr1 - arr2)\n\n    # Create a mask where any channel difference exceeds the tolerance\n    mask = np.any(diff > tolerance, axis=2)\n\n    # Prepare an output image array\n    # Where differences are found, we set the pixel to the diff color; otherwise, keep original\n    diff_color = np.array(config.DEFAULT_DIFF_COLOR, dtype=\'uint8\')\n    output_arr = np.where(mask[:, :, None], diff_color, np.uint8(arr1))\n\n    # Convert back to a PIL image\n    diff_image = Image.fromarray(output_arr, \'RGB\')\n    return diff_image\n\n\nif __name__ == "__main__":\n    # For testing purposes only\n    import sys\n    if len(sys.argv) < 3:\n        print("Usage: python image_comparator.py <image1> <image2>")\n        sys.exit(1)\n    diff_img = compare_images(sys.argv[1], sys.argv[2])\n    diff_img.show()\nPK\x03\x04\x14\x00\x00\x00\x00\x00 X*[3&\x8c\x93h\x10\x00\x00h\x10\x00\x00\x06\x00\x00\x00gui.pyimport os\nimport tkinter as tk\nfrom tkinter import filedialog, messagebox\nfrom PIL import ImageTk, Image\nimport image_comparator\nimport config\n\n\nclass ImageDiffGUI(tk.Tk):\n    def __init__(self):\n        super().__init__()\n        self.title(\'Image Diff Tool\')\n        self.geometry(\'1000x600\')\n\n        # Instance variables for image paths and images\n        self.image1_path = None\n        self.image2_path = None\n        self.diff_image = None\n        self.tk_diff_image = None  # Tkinter compatible image for display\n\n        # Create UI elements\n        self.create_widgets()\n\n    def create_widgets(self):\n        # Frame for buttons\n        button_frame = tk.Frame(self)\n        button_frame.pack(side=tk.TOP, pady=10)\n\n        btn_load1 = tk.Button(button_frame, text=\'Load Image 1\', command=self.load_image1)\n        btn_load1.pack(side=tk.LEFT, padx=5)\n\n        btn_load2 = tk.Button(button_frame, text=\'Load Image 2\', command=self.load_image2)\n        btn_load2.pack(side=tk.LEFT, padx=5)\n\n        btn_compare = tk.Button(button_frame, text=\'Compare Images\', command=self.compare_images)\n        btn_compare.pack(side=tk.LEFT, padx=5)\n\n        btn_export = tk.Button(button_frame, text=\'Export Diff Image\', command=self.export_diff)\n        btn_export.pack(side=tk.LEFT, padx=5)\n\n        # Canvas to display images\n        self.image_canvas = tk.Canvas(self, bg=\'gray\', width=800, height=500)\n        self.image_canvas.pack(pady=10)\n\n        # Label for status and messages\n        self.status_label = tk.Label(self, text=\'Please load two images to compare.\', fg=\'blue\')\n        self.status_label.pack(side=tk.BOTTOM, pady=5)\n\n    def load_image1(self):\n        path = filedialog.askopenfilename(initialdir=config.DEFAULT_INPUT_DIR,\n                                          title=\'Select First Image\',\n                                          filetypes=[(\'Image Files\', \'*.png;*.jpg;*.jpeg;*.bmp\')])\n        if path:\n            self.image1_path = path\n            self.status_label[\'text\'] = f\'Loaded Image 1: {path}\'\n\n    def load_image2(self):\n        path = filedialog.askopenfilename(initialdir=config.DEFAULT_INPUT_DIR,\n                                          title=\'Select Second Image\',\n                                          filetypes=[(\'Image Files\', \'*.png;*.jpg;*.jpeg;*.bmp\')])\n        if path:\n            self.image2_path = path\n            self.status_label[\'text\'] = f\'Loaded Image 2: {path}\'\n\n    def compare_images(self):\n        if not self.image1_path or not self.image2_path:\n            messagebox.showerror(\'Error\', \'Please load both images before comparing.\')\n            return\n        try:\n            self.diff_image = image_comparator.compare_images(self.image1_path, self.image2_path)\n            # Resize the image for display in canvas if needed\n            disp_image = self.diff_image.copy()\n            disp_image.thumbnail((800, 500))\n            self.tk_diff_image = ImageTk.PhotoImage(disp_image)\n            self.image_canvas.delete(\'all\')\n            self.image_canvas.create_image(400, 250, image=self.tk_diff_image)\n            self.status_label[\'text\'] = \'Comparison complete. Differences highlighted.\'\n        except Exception as e:\n            messagebox.showerror(\'Error\', f\'Error during comparison: {e}\')\n            self.status_label[\'text\'] = \'Comparison failed.\'\n\n    def export_diff(self):\n        if self.diff_image is None:\n            messagebox.showerror(\'Error\', \'No diff image to export. Please perform a comparison first.\')\n            return\n        directory = filedialog.askdirectory(initialdir=config.DEFAULT_OUTPUT_DIR, title=\'Select Output Directory\')\n        if directory:\n            save_path = os.path.join(directory, \'diff_image.png\')\n            try:\n                self.diff_image.save(save_path)\n                messagebox.showinfo(\'Success\', f\'Diff image saved to {save_path}\')\n                self.status_label[\'text\'] = f\'Diff image exported to {save_path}\'\n            except Exception as e:\n                messagebox.showerror(\'Error\', f\'Error saving diff image: {e}\')\n                self.status_label[\'text\'] = \'Export failed.\'\n\n\nif __name__ == \'__main__\':\n    app = ImageDiffGUI()\n    app.mainloop()\nPK\x03\x04\x14\x00\x00\x00\x00\x00 X*[\x887\t\xde\x82\x04\x00\x00\x82\x04\x00\x00\x05\x00\x00\x00db.pyimport sqlite3\nimport os\nfrom datetime import datetime\n\nDB_FILENAME = \'image_diff_logs.db\'\n\n\ndef init_db(db_path=DB_FILENAME):\n    """\n    Initialize the SQLite database for logging image comparisons\n    """\n    conn = sqlite3.connect(db_path)\n    cursor = conn.cursor()\n    cursor.execute(\'\'\'\n        CREATE TABLE IF NOT EXISTS comparisons (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            image1_path TEXT,\n            image2_path TEXT,\n            timestamp TEXT\n        )\n    \'\'\')\n    conn.commit()\n    conn.close()\n\n\ndef log_comparison(image1_path, image2_path, db_path=DB_FILENAME):\n    """\n    Log the comparison event in the SQLite database\n    """\n    conn = sqlite3.connect(db_path)\n    cursor = conn.cursor()\n    timestamp = datetime.now().strftime(\'%Y-%m-%d %H:%M:%S\')\n    cursor.execute(\'INSERT INTO comparisons (image1_path, image2_path, timestamp) VALUES (?, ?, ?)\',\n                   (image1_path, image2_path, timestamp))\n    conn.commit()\n    conn.close()\n\n\n# If running this module directly, initialize the database\nif __name__ == \'__main__\':\n    init_db()\n    print(f\'Database initialized and stored in {DB_FILENAME}\')\nPK\x03\x04\x14\x00\x00\x00\x00\x00 X*[\xd5\xff\xa0K\xe7\x00\x00\x00\xe7\x00\x00\x00\x07\x00\x00\x00main.pyimport gui\nimport db\n\n\ndef main():\n    # Initialize the database (for logging or future use)\n    db.init_db()\n    # Launch the GUI application\n    app = gui.ImageDiffGUI()\n    app.mainloop()\n\n\nif __name__ == \'__main__\':\n    main()\nPK\x03\x04\x14\x00\x00\x00\x00\x00 X*[\x19\x87\xe0\xc24\x00\x00\x004\x00\x00\x00\x10\x00\x00\x00requirements.txtPillow==9.5.0\nopencv-python==4.8.0.76\nnumpy==1.23.5\nPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00 X*[\xfb\xa5\x05\xb8\x92\x01\x00\x00\x92\x01\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\x00\x00\x00\x00config.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00 X*[\xb9$\x1c\xb1\xbd\x07\x00\x00\xbd\x07\x00\x00\x13\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\xb9\x01\x00\x00image_comparator.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00 X*[3&\x8c\x93h\x10\x00\x00h\x10\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\xa7\t\x00\x00gui.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00 X*[\x887\t\xde\x82\x04\x00\x00\x82\x04\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x013\x1a\x00\x00db.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00 X*[\xd5\xff\xa0K\xe7\x00\x00\x00\xe7\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\xd8\x1e\x00\x00main.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00 X*[\x19\x87\xe0\xc24\x00\x00\x004\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\xe4\x1f\x00\x00requirements.txtPK\x05\x06\x00\x00\x00\x00\x06\x00\x06\x00R\x01\x00\x00F \x00\x00\x00\x00'
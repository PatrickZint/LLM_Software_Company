b'PK\x03\x04\x14\x00\x00\x00\x00\x00\xb0\x92)[\x10\xf7\xc9W<\r\x00\x00<\r\x00\x00\x07\x00\x00\x00main.pyimport argparse\nimport os\nimport sys\nimport logging\nimport yaml\nimport cv2\nfrom datetime import datetime\n\nfrom image_comparator import compare_images\nfrom database import init_db, insert_comparison_record\nfrom logger_config import setup_logger\n\n\ndef load_config(config_path):\n    with open(config_path, \'r\') as f:\n        config = yaml.safe_load(f)\n    return config\n\n\ndef main():\n    parser = argparse.ArgumentParser(description=\'Compare two images and store diff results.\')\n    parser.add_argument(\'image1\', help=\'Path to the first image file.\')\n    parser.add_argument(\'image2\', help=\'Path to the second image file.\')\n    parser.add_argument(\'--config\', default=\'config.yaml\', help=\'Path to the configuration YAML file.\')\n    args = parser.parse_args()\n\n    config = load_config(args.config)\n\n    # Set up logging\n    setup_logger(config.get(\'logging\', {}))\n    logger = logging.getLogger(__name__)\n    \n    # Validate that the input image formats are supported\n    supported_formats = config.get(\'image\', {}).get(\'supported_formats\', [\'png\', \'jpg\', \'jpeg\'])\n    ext1 = os.path.splitext(args.image1)[1][1:].lower()\n    ext2 = os.path.splitext(args.image2)[1][1:].lower()\n    if ext1 not in supported_formats or ext2 not in supported_formats:\n        logger.error(\'Unsupported image format. Supported formats: %s\', supported_formats)\n        sys.exit(1)\n\n    # Ensure export directory exists\n    export_dir = config.get(\'export\', {}).get(\'path\', \'exported_diffs\')\n    if not os.path.exists(export_dir):\n        os.makedirs(export_dir)\n        logger.info(\'Created export directory: %s\', export_dir)\n\n    try:\n        # Get tolerance threshold from config\n        tolerance = config.get(\'image\', {}).get(\'threshold\', 30)\n        # Compare images\n        result = compare_images(args.image1, args.image2, tolerance)\n        diff_image = result[\'diff_image\']\n        differences = result[\'differences\']\n        metadata = result[\'metadata\']\n    except Exception as e:\n        logger.exception(\'Error during image comparison: %s\', e)\n        sys.exit(1)\n\n    # Save the annotated diff image to the export directory\n    timestamp = datetime.now().strftime(\'%Y%m%d_%H%M%S\')\n    diff_image_filename = f"diff_{timestamp}.png"\n    diff_image_path = os.path.join(export_dir, diff_image_filename)\n    if not cv2.imwrite(diff_image_path, diff_image):\n        logger.error(\'Failed to write diff image to disk.\')\n        sys.exit(1)\n    logger.info(\'Diff image saved to %s\', diff_image_path)\n\n    # Store the comparison result in the database\n    try:\n        db_config = config.get(\'database\', {})\n        db_path = db_config.get(\'path\', \'results.db\')\n        conn = init_db(db_path)\n        record = {\n            \'timestamp\': timestamp,\n            \'image1_path\': os.path.abspath(args.image1),\n            \'image2_path\': os.path.abspath(args.image2),\n            \'diff_image_path\': os.path.abspath(diff_image_path),\n            \'differences\': str(differences),\n            \'width\': metadata[\'width\'],\n            \'height\': metadata[\'height\'],\n            \'parameters\': f"tolerance={tolerance}"\n        }\n        insert_comparison_record(conn, record)\n        conn.close()\n        logger.info(\'Comparison record inserted into database.\')\n    except Exception as e:\n        logger.exception(\'Failed to insert record into database: %s\', e)\n        sys.exit(1)\n\n\nif __name__ == \'__main__\':\n    main()\nPK\x03\x04\x14\x00\x00\x00\x00\x00\xb0\x92)[$X\x99\x148\x07\x00\x008\x07\x00\x00\x13\x00\x00\x00image_comparator.pyimport cv2\nimport numpy as np\n\n\ndef compare_images(image_path1, image_path2, tolerance):\n    """\n    Compare two images at a pixel level and highlight differences.\n\n    Args:\n        image_path1 (str): Path to the first image.\n        image_path2 (str): Path to the second image.\n        tolerance (int): Threshold value to ignore minor differences.\n\n    Returns:\n        dict: Contains the annotated diff image, list of differences (bounding boxes), and image metadata.\n    """\n    # Load images using OpenCV\n    img1 = cv2.imread(image_path1)\n    img2 = cv2.imread(image_path2)\n    \n    if img1 is None or img2 is None:\n        raise ValueError(\'One of the images could not be loaded. Check the file paths.\')\n\n    # Verify that the dimensions match\n    if img1.shape != img2.shape:\n        raise ValueError(\'Images have different dimensions.\')\n\n    # Compute the absolute difference between images\n    diff = cv2.absdiff(img1, img2)\n\n    # Convert the difference to grayscale for thresholding\n    gray = cv2.cvtColor(diff, cv2.COLOR_BGR2GRAY)\n    \n    # Apply threshold to get regions with significant differences\n    _, thresh = cv2.threshold(gray, tolerance, 255, cv2.THRESH_BINARY)\n\n    # Find contours of the differing areas\n    contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\n    differences = []\n\n    # Draw bounding rectangles around detected differences on a copy of the image\n    annotated_image = img1.copy()\n    for cnt in contours:\n        x, y, w, h = cv2.boundingRect(cnt)\n        differences.append({"x": int(x), "y": int(y), "w": int(w), "h": int(h)})\n        cv2.rectangle(annotated_image, (x, y), (x + w, y + h), (0, 0, 255), 2)\n\n    metadata = {"width": img1.shape[1], "height": img1.shape[0]}\n    \n    return {"diff_image": annotated_image, "differences": differences, "metadata": metadata}\nPK\x03\x04\x14\x00\x00\x00\x00\x00\xb0\x92)[\xf5\x00\xa8\x0b\xed\x05\x00\x00\xed\x05\x00\x00\x0b\x00\x00\x00database.pyimport sqlite3\n\n\ndef init_db(db_path):\n    """\n    Initialize the SQLite database and create the comparisons table if it does not exist.\n\n    Args:\n        db_path (str): Path to the SQLite database file.\n\n    Returns:\n        sqlite3.Connection: SQLite connection object.\n    """\n    conn = sqlite3.connect(db_path)\n    cursor = conn.cursor()\n    cursor.execute(\'\'\'\n        CREATE TABLE IF NOT EXISTS comparisons (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            timestamp TEXT,\n            image1_path TEXT,\n            image2_path TEXT,\n            diff_image_path TEXT,\n            differences TEXT,\n            width INTEGER,\n            height INTEGER,\n            parameters TEXT\n        )\n    \'\'\')\n    conn.commit()\n    return conn\n\n\ndef insert_comparison_record(conn, record):\n    """\n    Insert a new comparison record into the database.\n\n    Args:\n        conn (sqlite3.Connection): The database connection object.\n        record (dict): Dictionary containing comparison details.\n    """\n    cursor = conn.cursor()\n    cursor.execute(\'\'\'\n        INSERT INTO comparisons (\n            timestamp, image1_path, image2_path, diff_image_path, differences, width, height, parameters\n        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)\n    \'\'\', (\n        record[\'timestamp\'],\n        record[\'image1_path\'],\n        record[\'image2_path\'],\n        record[\'diff_image_path\'],\n        record[\'differences\'],\n        record[\'width\'],\n        record[\'height\'],\n        record[\'parameters\']\n    ))\n    conn.commit()\nPK\x03\x04\x14\x00\x00\x00\x00\x00\xb0\x92)[!\x81\x19\xb8x\x02\x00\x00x\x02\x00\x00\x10\x00\x00\x00logger_config.pyimport logging\n\n\ndef setup_logger(logging_config):\n    """\n    Set up the application\'s logging based on configuration.\n\n    Args:\n        logging_config (dict): Dictionary containing logging parameters such as level and output file.\n    """\n    level = logging_config.get(\'level\', \'INFO\').upper()\n    log_file = logging_config.get(\'file\', \'app.log\')\n    \n    # Set up basic configuration for logging\n    logging.basicConfig(\n        level=level,\n        format=\'%(asctime)s - %(name)s - %(levelname)s - %(message)s\',\n        handlers=[\n            logging.FileHandler(log_file),\n            logging.StreamHandler()\n        ]\n    )\nPK\x03\x04\x14\x00\x00\x00\x00\x00\xb0\x92)[2y\x90\x8d\xbf\x00\x00\x00\xbf\x00\x00\x00\x0b\x00\x00\x00config.yamldatabase:\n  path: "results.db"\n\nimage:\n  threshold: 30\n  supported_formats:\n    - "png"\n    - "jpg"\n    - "jpeg"\n\nexport:\n  path: "exported_diffs"\n\nlogging:\n  level: "INFO"\n  file: "app.log"\nPK\x03\x04\x14\x00\x00\x00\x00\x00\xb0\x92)[\x91\xce\xf8\xaf/\x00\x00\x00/\x00\x00\x00\x10\x00\x00\x00requirements.txtopencv-python>=4.0.0\nPillow>=9.0.0\nPyYAML>=5.0\nPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\xb0\x92)[\x10\xf7\xc9W<\r\x00\x00<\r\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\x00\x00\x00\x00main.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\xb0\x92)[$X\x99\x148\x07\x00\x008\x07\x00\x00\x13\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01a\r\x00\x00image_comparator.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\xb0\x92)[\xf5\x00\xa8\x0b\xed\x05\x00\x00\xed\x05\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\xca\x14\x00\x00database.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\xb0\x92)[!\x81\x19\xb8x\x02\x00\x00x\x02\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\xe0\x1a\x00\x00logger_config.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\xb0\x92)[2y\x90\x8d\xbf\x00\x00\x00\xbf\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\x86\x1d\x00\x00config.yamlPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\xb0\x92)[\x91\xce\xf8\xaf/\x00\x00\x00/\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01n\x1e\x00\x00requirements.txtPK\x05\x06\x00\x00\x00\x00\x06\x00\x06\x00d\x01\x00\x00\xcb\x1e\x00\x00\x00\x00'
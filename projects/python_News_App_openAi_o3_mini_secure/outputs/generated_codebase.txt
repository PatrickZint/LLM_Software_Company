b'PK\x03\x04\x14\x00\x00\x00\x00\x00\xfa\x8c)[V\xc7\xd5\x06\xd8\x0e\x00\x00\xd8\x0e\x00\x00\x07\x00\x00\x00main.pyimport tkinter as tk\nimport tkinter.messagebox as messagebox\nfrom tkinter import ttk\n\nfrom news_api import NewsAPI\nfrom config import load_config\n\n\nclass NewsApp:\n    def __init__(self, root):\n        self.root = root\n        self.root.title("Lightweight News Reader")\n        self.news_api = NewsAPI()\n\n        # Create main frame\n        self.main_frame = ttk.Frame(self.root, padding="10")\n        self.main_frame.pack(expand=True, fill=tk.BOTH)\n\n        # Loading label\n        self.loading_label = ttk.Label(self.main_frame, text="Loading headlines...")\n        self.loading_label.pack()\n\n        # Listbox for headlines\n        self.headlines_list = tk.Listbox(self.main_frame, height=15)\n        self.headlines_list.pack(expand=True, fill=tk.BOTH, pady=5)\n        self.headlines_list.bind("<<ListboxSelect>>", self.on_headline_select)\n\n        # Refresh button\n        self.refresh_button = ttk.Button(self.main_frame, text="Refresh", command=self.load_headlines)\n        self.refresh_button.pack(pady=5)\n\n        self.headlines_data = []  # Will store list of articles\n\n        # Initially load headlines\n        self.load_headlines()\n\n    def load_headlines(self):\n        self.loading_label.config(text="Loading headlines...")\n        self.root.update_idletasks()\n        try:\n            articles = self.news_api.get_top_headlines()\n            self.headlines_list.delete(0, tk.END)\n            self.headlines_data = articles\n            if not articles:\n                self.loading_label.config(text="No headlines available.")\n            else:\n                self.loading_label.config(text="Select an article to view details.")\n                for idx, article in enumerate(articles):\n                    title = article.get("title", "No Title")\n                    timestamp = article.get("publishedAt", "")\n                    display_text = f"{title} ({timestamp})" if timestamp else title\n                    self.headlines_list.insert(tk.END, display_text)\n        except Exception as e:\n            self.loading_label.config(text="Error fetching news")\n            messagebox.showerror("Error", f"Failed to load headlines: {str(e)}")\n\n    def on_headline_select(self, event):\n        if not self.headlines_list.curselection():\n            return  \n        index = self.headlines_list.curselection()[0]\n        article = self.headlines_data[index]\n        self.open_article_detail(article)\n\n    def open_article_detail(self, article):\n        detail_window = tk.Toplevel(self.root)\n        detail_window.title(article.get("title", "Article Detail"))\n        frame = ttk.Frame(detail_window, padding="10")\n        frame.pack(expand=True, fill=tk.BOTH)\n\n        # Title\n        title_label = ttk.Label(frame, text=article.get("title", "No Title"), font=("Helvetica", 16, "bold"))\n        title_label.pack(pady=(0, 10))\n\n        # Description\n        description = article.get("description", "No Description Available")\n        desc_label = ttk.Label(frame, text=description, wraplength=600, justify="left")\n        desc_label.pack(pady=(0, 10))\n\n        # Content\n        content = article.get("content")\n        if content:\n            content_label = ttk.Label(frame, text=content, wraplength=600, justify="left")\n            content_label.pack(pady=(0, 10))\n\n        # Publication info\n        pub_date = article.get("publishedAt", "")\n        source = article.get("source", {}).get("name", "Unknown Source")\n        info_label = ttk.Label(frame, text=f"Published at: {pub_date} | Source: {source}")\n        info_label.pack(pady=(0, 10))\n\n        # Back/Close button\n        close_button = ttk.Button(frame, text="Close", command=detail_window.destroy)\n        close_button.pack(pady=5)\n\n\nif __name__ == "__main__":\n    root = tk.Tk()\n    app = NewsApp(root)\n    root.mainloop()\nPK\x03\x04\x14\x00\x00\x00\x00\x00\xfa\x8c)[\xee\xd5\x10K\xad\x03\x00\x00\xad\x03\x00\x00\x0b\x00\x00\x00news_api.pyimport requests\n\nfrom config import load_config\n\n\nclass NewsAPI:\n    def __init__(self):\n        self.config = load_config()  # Load configuration from external file\n        self.api_key = self.config.get("api_key")\n        self.endpoint = self.config.get("endpoint")\n\n        if not self.api_key or not self.endpoint:\n            raise ValueError("API key or endpoint not configured properly in config.json.")\n\n    def get_top_headlines(self):\n        """Fetch top headlines using the configured public news API endpoint."""\n        params = {\n            "apiKey": self.api_key\n        }\n        try:\n            response = requests.get(self.endpoint, params=params, timeout=10)\n            response.raise_for_status()\n            data = response.json()\n            articles = data.get("articles", [])\n            return articles\n        except requests.RequestException as e:\n            raise Exception(f"Error fetching news: {str(e)}")\nPK\x03\x04\x14\x00\x00\x00\x00\x00\xfa\x8c)[\xbczZ\x8d\xd5\x02\x00\x00\xd5\x02\x00\x00\t\x00\x00\x00config.pyimport json\nimport os\n\nCONFIG_FILE = "config.json"\n\n\ndef load_config():\n    """\n    Load configuration from an external JSON file.\n    If the file does not exist, create one with default settings.\n    Returns:\n        dict: Configuration parameters.\n    """\n    if not os.path.exists(CONFIG_FILE):\n        # Default configuration settings\n        default_config = {\n            "endpoint": "https://newsapi.org/v2/top-headlines?country=us",\n            "api_key": "YOUR_API_KEY_HERE"\n        }\n        with open(CONFIG_FILE, "w") as f:\n            json.dump(default_config, f, indent=4)\n        return default_config\n    else:\n        with open(CONFIG_FILE, "r") as f:\n            config = json.load(f)\n        return config\nPK\x03\x04\x14\x00\x00\x00\x00\x00\xfa\x8c)[\xa9\x86\x02\x0cj\x00\x00\x00j\x00\x00\x00\x0b\x00\x00\x00config.json{\n    "endpoint": "https://newsapi.org/v2/top-headlines?country=us",\n    "api_key": "YOUR_API_KEY_HERE"\n}\nPK\x03\x04\x14\x00\x00\x00\x00\x00\xfa\x8c)[\xe8:\xb0Nl\x05\x00\x00l\x05\x00\x00\x08\x00\x00\x00tests.pyimport unittest\nfrom unittest.mock import patch\n\nfrom news_api import NewsAPI\n\n\nclass TestNewsAPI(unittest.TestCase):\n    @patch("news_api.requests.get")\n    def test_get_top_headlines_success(self, mock_get):\n        # Define a sample JSON response to simulate a successful API call\n        mock_response = {\n            "status": "ok",\n            "totalResults": 1,\n            "articles": [\n                {\n                    "title": "Test Article",\n                    "description": "Test Description",\n                    "publishedAt": "2023-10-01T12:00:00Z",\n                    "source": {"name": "Test Source"},\n                    "content": "Test full content"\n                }\n            ]\n        }\n        mock_get.return_value.status_code = 200\n        mock_get.return_value.json.return_value = mock_response\n\n        news_api = NewsAPI()\n        articles = news_api.get_top_headlines()\n        self.assertEqual(len(articles), 1)\n        self.assertEqual(articles[0]["title"], "Test Article")\n\n    @patch("news_api.requests.get")\n    def test_get_top_headlines_failure(self, mock_get):\n        # Simulate a network error by raising an exception\n        mock_get.side_effect = Exception("Network error")\n        news_api = NewsAPI()\n        with self.assertRaises(Exception):\n            news_api.get_top_headlines()\n\n\nif __name__ == "__main__":\n    unittest.main()\nPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\xfa\x8c)[V\xc7\xd5\x06\xd8\x0e\x00\x00\xd8\x0e\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\x00\x00\x00\x00main.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\xfa\x8c)[\xee\xd5\x10K\xad\x03\x00\x00\xad\x03\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\xfd\x0e\x00\x00news_api.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\xfa\x8c)[\xbczZ\x8d\xd5\x02\x00\x00\xd5\x02\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\xd3\x12\x00\x00config.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\xfa\x8c)[\xa9\x86\x02\x0cj\x00\x00\x00j\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\xcf\x15\x00\x00config.jsonPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\xfa\x8c)[\xe8:\xb0Nl\x05\x00\x00l\x05\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01b\x16\x00\x00tests.pyPK\x05\x06\x00\x00\x00\x00\x05\x00\x05\x00\x14\x01\x00\x00\xf4\x1b\x00\x00\x00\x00'
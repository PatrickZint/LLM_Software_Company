b'PK\x03\x04\x14\x00\x00\x00\x00\x00Nx*[\xede\x81\x93\xbd\x00\x00\x00\xbd\x00\x00\x00\x0b\x00\x00\x00config.json// Configuration file for the news reader application\n{\n  "api_endpoint": "https://newsapi.org/v2/top-headlines",\n  "api_key": "YOUR_API_KEY",\n  "refresh_interval": 15,\n  "country": "us"\n}\nPK\x03\x04\x14\x00\x00\x00\x00\x00Nx*[\xf2\xa9\x0b\x90\xbc\x04\x00\x00\xbc\x04\x00\x00\x07\x00\x00\x00main.pyimport json\nimport os\nimport tkinter as tk\nfrom tkinter import messagebox\nfrom news_api import NewsAPIClient\nfrom ui import NewsApp\n\n\ndef load_config(config_path=\'config.json\'):\n    if not os.path.exists(config_path):\n        raise FileNotFoundError(f"Configuration file {config_path} not found.")\n    with open(config_path, \'r\') as f:\n        config = json.load(f)\n    return config\n\n\ndef main():\n    try:\n        config = load_config()\n    except Exception as e:\n        print(f"Error loading configuration: {e}")\n        return\n\n    # Initialize the API client with configuration\n    api_client = NewsAPIClient(\n        endpoint=config.get(\'api_endpoint\'),\n        api_key=config.get(\'api_key\'),\n        country=config.get(\'country\', \'us\')\n    )\n\n    # Set up the Tkinter root window\n    root = tk.Tk()\n    root.title("Lightweight News Reader")\n    root.geometry("800x600")\n\n    # Create and start the UI\n    app = NewsApp(root, api_client, refresh_interval=config.get(\'refresh_interval\', 15))\n    app.pack(fill=\'both\', expand=True)\n\n    # Start the Tkinter event loop\n    try:\n        root.mainloop()\n    except KeyboardInterrupt:\n        print("Application closed.")\n\n\nif __name__ == \'__main__\':\n    main()\nPK\x03\x04\x14\x00\x00\x00\x00\x00Nx*[\x8elo_\x9d\x05\x00\x00\x9d\x05\x00\x00\x0b\x00\x00\x00news_api.pyimport requests\nimport datetime\n\n\nclass NewsAPIClient:\n    def __init__(self, endpoint, api_key, country=\'us\'):\n        self.endpoint = endpoint\n        self.api_key = api_key\n        self.country = country\n\n    def get_top_headlines(self):\n        params = {\n            \'apiKey\': self.api_key,\n            \'country\': self.country\n        }\n        try:\n            response = requests.get(self.endpoint, params=params, timeout=10)\n            response.raise_for_status()\n            data = response.json()\n            if data.get(\'status\') != \'ok\':\n                raise ValueError(\'API returned error status\')\n            # Optional: Convert publication date into human readable format\n            for article in data.get(\'articles\', []):\n                if article.get(\'publishedAt\'):\n                    article[\'publishedAtReadable\'] = self._format_date(article.get(\'publishedAt\'))\n            return data.get(\'articles\', [])\n        except requests.exceptions.RequestException as e:\n            raise ConnectionError(f"Network error occurred: {e}")\n        except ValueError as ve:\n            raise ValueError(f"Failed to retrieve articles: {ve}")\n\n    def _format_date(self, date_str):\n        try:\n            # Example: \'2023-10-10T12:34:56Z\'\n            dt = datetime.datetime.strptime(date_str, "%Y-%m-%dT%H:%M:%SZ")\n            return dt.strftime("%b %d, %Y %I:%M %p")\n        except Exception:\n            return date_str\nPK\x03\x04\x14\x00\x00\x00\x00\x00Nx*[\x87\x89 h\x15\x17\x00\x00\x15\x17\x00\x00\x05\x00\x00\x00ui.pyimport tkinter as tk\nfrom tkinter import ttk\nfrom tkinter import messagebox\nimport threading\nimport webbrowser\n\n\nclass NewsApp(tk.Frame):\n    def __init__(self, master, api_client, refresh_interval=15):\n        super().__init__(master)\n        self.master = master\n        self.api_client = api_client\n        self.refresh_interval_ms = refresh_interval * 60 * 1000  # Convert minutes to milliseconds\n        self.articles = []\n\n        self.create_widgets()\n        self.fetch_articles_async()\n\n    def create_widgets(self):\n        # Create a top frame for Refresh button\n        top_frame = tk.Frame(self)\n        top_frame.pack(side=\'top\', fill=\'x\', padx=10, pady=5)\n\n        refresh_btn = tk.Button(top_frame, text=\'Refresh\', command=self.fetch_articles_async)\n        refresh_btn.pack(side=\'right\')\n\n        # Create a canvas with a scrollbar for the list of headlines\n        self.canvas = tk.Canvas(self)\n        self.scrollbar = tk.Scrollbar(self, orient=\'vertical\', command=self.canvas.yview)\n        self.scrollable_frame = tk.Frame(self.canvas)\n\n        self.scrollable_frame.bind(\n            "<Configure>",\n            lambda e: self.canvas.configure(\n                scrollregion=self.canvas.bbox("all")\n            )\n        )\n\n        self.canvas.create_window((0, 0), window=self.scrollable_frame, anchor=\'nw\')\n        self.canvas.configure(yscrollcommand=self.scrollbar.set)\n\n        self.canvas.pack(side=\'left\', fill=\'both\', expand=True)\n        self.scrollbar.pack(side=\'right\', fill=\'y\')\n\n        # Label for status / error messages\n        self.status_label = tk.Label(self, text=\'\', fg=\'red\')\n        self.status_label.pack(side=\'bottom\', fill=\'x\', padx=10, pady=5)\n\n    def fetch_articles_async(self):\n        self.status_label.config(text=\'Loading...\')\n        thread = threading.Thread(target=self.fetch_articles)\n        thread.start()\n\n    def fetch_articles(self):\n        try:\n            articles = self.api_client.get_top_headlines()\n            # Update articles on the UI thread\n            self.master.after(0, self.update_articles, articles)\n        except Exception as e:\n            self.master.after(0, self.show_error, str(e))\n\n    def update_articles(self, articles):\n        # Clear current items\n        for widget in self.scrollable_frame.winfo_children():\n            widget.destroy()\n        self.articles = articles\n\n        if not articles:\n            self.status_label.config(text=\'No articles found.\')\n            return\n        else:\n            self.status_label.config(text=\'\')\n\n        # Create a frame for each article\n        for idx, article in enumerate(articles):\n            frame = ttk.Frame(self.scrollable_frame, relief=\'ridge\', borderwidth=1, padding=5)\n            frame.pack(fill=\'x\', padx=5, pady=5)\n            frame.bind("<Button-1>", lambda e, idx=idx: self.open_detail(idx))\n\n            # Article title\n            title = article.get(\'title\', \'No Title\')\n            title_label = ttk.Label(frame, text=title, font=(\'Helvetica\', 12, \'bold\'))\n            title_label.pack(anchor=\'w\')\n            title_label.bind("<Button-1>", lambda e, idx=idx: self.open_detail(idx))\n\n            # Publication Date\n            pub_date = article.get(\'publishedAtReadable\', \'\')\n            date_label = ttk.Label(frame, text=pub_date, font=(\'Helvetica\', 10, \'italic\'))\n            date_label.pack(anchor=\'w\')\n\n            # Snippet (using description as snippet if available)\n            snippet = article.get(\'description\', \'No description available.\')\n            snippet_label = ttk.Label(frame, text=snippet, wraplength=750, justify=\'left\')\n            snippet_label.pack(anchor=\'w\')\n\n    def show_error(self, error_message):\n        self.status_label.config(text=f"Error: {error_message}")\n        retry = messagebox.askretrycancel("Error", f"Failed to fetch news:\\n{error_message}\\nDo you want to retry?")\n        if retry:\n            self.fetch_articles_async()\n\n    def open_detail(self, idx):\n        article = self.articles[idx]\n        detail_window = tk.Toplevel(self.master)\n        detail_window.title(article.get(\'title\', \'Article Detail\'))\n        detail_window.geometry(\'600x400\')\n\n        # Title\n        title_label = ttk.Label(detail_window, text=article.get(\'title\', \'No Title\'), font=(\'Helvetica\', 14, \'bold\'))\n        title_label.pack(pady=10, anchor=\'center\')\n\n        # Publication Date\n        pub_date = article.get(\'publishedAtReadable\', \'\')\n        date_label = ttk.Label(detail_window, text=pub_date, font=(\'Helvetica\', 10, \'italic\'))\n        date_label.pack(pady=5)\n\n        # Content / Description\n        content = article.get(\'content\') or article.get(\'description\', \'No content available.\')\n        content_text = tk.Text(detail_window, wrap=\'word\')\n        content_text.insert(\'1.0\', content)\n        content_text.config(state=\'disabled\')\n        content_text.pack(expand=True, fill=\'both\', padx=10, pady=10)\n\n        # Read more link if URL is available\n        url = article.get(\'url\')\n        if url:\n            def open_url(event=None, url=url):\n                webbrowser.open(url)\n            link = ttk.Label(detail_window, text=\'Read more...\', foreground=\'blue\', cursor=\'hand2\')\n            link.pack(pady=5)\n            link.bind("<Button-1>", open_url)\n\n        # A close button\n        close_btn = ttk.Button(detail_window, text=\'Close\', command=detail_window.destroy)\n        close_btn.pack(pady=5)\n\n        # Center the detail window on screen\n        detail_window.transient(self.master)\n        detail_window.grab_set()\n        self.master.wait_window(detail_window)\n\n    def schedule_refresh(self):\n        # Schedule next refresh\n        self.master.after(self.refresh_interval_ms, self.fetch_articles_async)\n\n    # Override pack so that we can schedule periodic refreshes after packing\n    def pack(self, *args, **kwargs):\n        super().pack(*args, **kwargs)\n        self.schedule_refresh()\nPK\x03\x04\x14\x00\x00\x00\x00\x00Nx*[,"/\x9d`\x08\x00\x00`\x08\x00\x00\x16\x00\x00\x00tests/test_news_api.pyimport unittest\nfrom unittest.mock import patch\nimport requests\nfrom news_api import NewsAPIClient\n\n\nclass TestNewsAPIClient(unittest.TestCase):\n    def setUp(self):\n        self.client = NewsAPIClient(\n            endpoint=\'https://newsapi.org/v2/top-headlines\',\n            api_key=\'dummy_key\',\n            country=\'us\'\n        )\n\n    @patch(\'news_api.requests.get\')\n    def test_get_top_headlines_success(self, mock_get):\n        # Setup a fake successful response\n        fake_response = {\n            \'status\': \'ok\',\n            \'articles\': [\n                {\n                    \'title\': \'Test Article\',\n                    \'description\': \'This is a test\',\n                    \'publishedAt\': \'2023-10-10T12:34:56Z\',\n                    \'url\': \'http://example.com\'\n                }\n            ]\n        }\n        mock_get.return_value.status_code = 200\n        mock_get.return_value.json.return_value = fake_response\n\n        articles = self.client.get_top_headlines()\n        self.assertEqual(len(articles), 1)\n        self.assertEqual(articles[0][\'title\'], \'Test Article\')\n        self.assertIn(\'publishedAtReadable\', articles[0])\n\n    @patch(\'news_api.requests.get\')\n    def test_get_top_headlines_http_error(self, mock_get):\n        # Setup a fake HTTP error\n        mock_get.return_value.raise_for_status.side_effect = requests.exceptions.HTTPError(\'Error\')\n        with self.assertRaises(Exception) as context:\n            self.client.get_top_headlines()\n        self.assertTrue(\'Network error occurred\' in str(context.exception))\n\n    @patch(\'news_api.requests.get\')\n    def test_get_top_headlines_api_failure(self, mock_get):\n        # Setup a fake API response with error status\n        fake_response = {\n            \'status\': \'error\',\n            \'message\': \'Invalid API key\'\n        }\n        mock_get.return_value.status_code = 200\n        mock_get.return_value.json.return_value = fake_response\n\n        with self.assertRaises(ValueError) as context:\n            self.client.get_top_headlines()\n        self.assertTrue(\'API returned error status\' in str(context.exception))\n\n\nif __name__ == \'__main__\':\n    unittest.main()\nPK\x03\x04\x14\x00\x00\x00\x00\x00Nx*[=t\xd1G4\x01\x00\x004\x01\x00\x00\x10\x00\x00\x00inputs/goals.txtCode a simple a lightweight news reader that fetches and displays top headlines from a public API.\nThe result should be a functional application with a UI, so if necessary, create required config files.\nFeatures: Basic UI: List of news headlines on the home screen Tappable item to view full article details.PK\x03\x04\x14\x00\x00\x00\x00\x00Nx*[@\xbe\x18\xfei\x00\x00\x00i\x00\x00\x00\x16\x00\x00\x00inputs/environment.txtThe system must be secure and provide a reasonable performance. Technology stack: Use Python and Tkinter.PK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00Nx*[\xede\x81\x93\xbd\x00\x00\x00\xbd\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\x00\x00\x00\x00config.jsonPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00Nx*[\xf2\xa9\x0b\x90\xbc\x04\x00\x00\xbc\x04\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\xe6\x00\x00\x00main.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00Nx*[\x8elo_\x9d\x05\x00\x00\x9d\x05\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\xc7\x05\x00\x00news_api.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00Nx*[\x87\x89 h\x15\x17\x00\x00\x15\x17\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\x8d\x0b\x00\x00ui.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00Nx*[,"/\x9d`\x08\x00\x00`\x08\x00\x00\x16\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\xc5"\x00\x00tests/test_news_api.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00Nx*[=t\xd1G4\x01\x00\x004\x01\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01Y+\x00\x00inputs/goals.txtPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00Nx*[@\xbe\x18\xfei\x00\x00\x00i\x00\x00\x00\x16\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\xbb,\x00\x00inputs/environment.txtPK\x05\x06\x00\x00\x00\x00\x07\x00\x07\x00\xa0\x01\x00\x00X-\x00\x00\x00\x00'
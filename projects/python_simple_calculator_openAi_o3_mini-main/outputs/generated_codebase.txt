b'PK\x03\x04\x14\x00\x00\x00\x00\x00\xeeu\xfcZI\x10\x84\x10$\x01\x00\x00$\x01\x00\x00\x14\x00\x00\x00exception_handler.pydef invalid_input_error():\n    """Return a formatted error message for invalid numeric input."""\n    return "Error: Both inputs must be valid numbers."\n\n\ndef division_by_zero_error():\n    """Return a formatted error message for division by zero."""\n    return "Error: Cannot divide by zero."\nPK\x03\x04\x14\x00\x00\x00\x00\x00\xeeu\xfcZ\xed\x7f\xcf\xb5K\x08\x00\x00K\x08\x00\x00\r\x00\x00\x00calculator.pyimport exception_handler\n\n\ndef validate_input(value):\n    """Validate that the input can be converted to a float.\n\n    Args:\n        value (str): The input value from the GUI.\n\n    Returns:\n        float: The numeric value converted from the input.\n\n    Raises:\n        ValueError: If conversion fails with a formatted error message.\n    """\n    try:\n        return float(value)\n    except ValueError:\n        raise ValueError(exception_handler.invalid_input_error())\n\n\ndef add(operand1, operand2):\n    """Return the sum of two operands."""\n    return operand1 + operand2\n\n\ndef subtract(operand1, operand2):\n    """Return the difference between two operands."""\n    return operand1 - operand2\n\n\ndef multiply(operand1, operand2):\n    """Return the product of two operands."""\n    return operand1 * operand2\n\n\ndef divide(operand1, operand2):\n    """Return the quotient of two operands after checking for division by zero.\n\n    Raises:\n        ZeroDivisionError: If the second operand is zero, with a formatted error message.\n    """\n    if operand2 == 0:\n        raise ZeroDivisionError(exception_handler.division_by_zero_error())\n    return operand1 / operand2\n\n\ndef calculate(operation, op1_str, op2_str):\n    """Handle input validation and perform the requested calculation.\n\n    Args:\n        operation (str): Operation to perform. Valid values: \'add\', \'subtract\', \'multiply\', \'divide\'.\n        op1_str (str): The first operand as a string.\n        op2_str (str): The second operand as a string.\n\n    Returns:\n        float: The result of the arithmetic operation.\n\n    Raises:\n        ValueError: For non-numeric inputs.\n        ZeroDivisionError: For division by zero cases.\n    """\n    operand1 = validate_input(op1_str)\n    operand2 = validate_input(op2_str)\n\n    if operation == \'add\':\n        return add(operand1, operand2)\n    elif operation == \'subtract\':\n        return subtract(operand1, operand2)\n    elif operation == \'multiply\':\n        return multiply(operand1, operand2)\n    elif operation == \'divide\':\n        return divide(operand1, operand2)\n    else:\n        raise ValueError(\'Unsupported operation.\')\nPK\x03\x04\x14\x00\x00\x00\x00\x00\xeeu\xfcZ\x96F\x91\x1bO\n\x00\x00O\n\x00\x00\x06\x00\x00\x00gui.pyimport tkinter as tk\nfrom tkinter import ttk\nimport calculator\n\n\nclass SimpleCalculatorApp:\n    def __init__(self, root):\n        self.root = root\n        self.root.title(\'Simple Calculator\')\n\n        # Create and position input fields\n        ttk.Label(root, text=\'Operand 1:\').grid(row=0, column=0, padx=5, pady=5, sticky=\'e\')\n        self.entry1 = ttk.Entry(root, width=15)\n        self.entry1.grid(row=0, column=1, padx=5, pady=5)\n\n        ttk.Label(root, text=\'Operand 2:\').grid(row=1, column=0, padx=5, pady=5, sticky=\'e\')\n        self.entry2 = ttk.Entry(root, width=15)\n        self.entry2.grid(row=1, column=1, padx=5, pady=5)\n\n        # Create Operation Buttons\n        btn_frame = ttk.Frame(root)\n        btn_frame.grid(row=2, column=0, columnspan=2, pady=10)\n\n        self.btn_add = ttk.Button(btn_frame, text=\'Add\', command=lambda: self.perform_operation(\'add\'))\n        self.btn_add.grid(row=0, column=0, padx=5)\n\n        self.btn_subtract = ttk.Button(btn_frame, text=\'Subtract\', command=lambda: self.perform_operation(\'subtract\'))\n        self.btn_subtract.grid(row=0, column=1, padx=5)\n\n        self.btn_multiply = ttk.Button(btn_frame, text=\'Multiply\', command=lambda: self.perform_operation(\'multiply\'))\n        self.btn_multiply.grid(row=0, column=2, padx=5)\n\n        self.btn_divide = ttk.Button(btn_frame, text=\'Divide\', command=lambda: self.perform_operation(\'divide\'))\n        self.btn_divide.grid(row=0, column=3, padx=5)\n\n        self.btn_clear = ttk.Button(btn_frame, text=\'Clear\', command=self.clear_fields)\n        self.btn_clear.grid(row=0, column=4, padx=5)\n\n        # Output label for displaying results or error messages\n        self.result_label = ttk.Label(root, text=\'\', font=(\'Arial\', 12))\n        self.result_label.grid(row=3, column=0, columnspan=2, pady=10)\n\n    def perform_operation(self, operation):\n        """Retrieve inputs, invoke the calculation, and update the display area with the result or error message."""\n        op1 = self.entry1.get()\n        op2 = self.entry2.get()\n\n        try:\n            result = calculator.calculate(operation, op1, op2)\n            self.result_label.config(text=f\'Result: {result}\', foreground=\'black\')\n        except (ValueError, ZeroDivisionError) as e:\n            self.result_label.config(text=str(e), foreground=\'red\')\n\n    def clear_fields(self):\n        """Clear the input fields and the result label."""\n        self.entry1.delete(0, tk.END)\n        self.entry2.delete(0, tk.END)\n        self.result_label.config(text=\'\')\n\n\ndef main():\n    root = tk.Tk()\n    app = SimpleCalculatorApp(root)\n    root.mainloop()\n\n\nif __name__ == \'__main__\':\n    main()\nPK\x03\x04\x14\x00\x00\x00\x00\x00\xeeu\xfcZ?j\xc8$/\x06\x00\x00/\x06\x00\x00\x08\x00\x00\x00tests.pyimport unittest\nfrom calculator import add, subtract, multiply, divide, validate_input, calculate\nimport exception_handler\n\n\nclass TestCalculatorOperations(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(add(2, 3), 5)\n        self.assertEqual(add(-1, 1), 0)\n\n    def test_subtract(self):\n        self.assertEqual(subtract(5, 3), 2)\n        self.assertEqual(subtract(3, 5), -2)\n\n    def test_multiply(self):\n        self.assertEqual(multiply(4, 3), 12)\n        self.assertEqual(multiply(-2, 3), -6)\n\n    def test_divide(self):\n        self.assertEqual(divide(10, 2), 5)\n        with self.assertRaises(ZeroDivisionError) as context:\n            divide(10, 0)\n        self.assertEqual(str(context.exception), exception_handler.division_by_zero_error())\n\n    def test_validate_input_success(self):\n        self.assertEqual(validate_input(\'3.14\'), 3.14)\n        self.assertEqual(validate_input(\'10\'), 10.0)\n\n    def test_validate_input_failure(self):\n        with self.assertRaises(ValueError) as context:\n            validate_input(\'abc\')\n        self.assertEqual(str(context.exception), exception_handler.invalid_input_error())\n\n    def test_calculate_add(self):\n        result = calculate(\'add\', \'2\', \'3\')\n        self.assertEqual(result, 5)\n\n    def test_calculate_divide_by_zero(self):\n        with self.assertRaises(ZeroDivisionError):\n            calculate(\'divide\', \'10\', \'0\')\n\n    def test_calculate_invalid_operation(self):\n        with self.assertRaises(ValueError):\n            calculate(\'mod\', \'10\', \'3\')\n\n\nif __name__ == \'__main__\':\n    unittest.main()\nPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\xeeu\xfcZI\x10\x84\x10$\x01\x00\x00$\x01\x00\x00\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\x00\x00\x00\x00exception_handler.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\xeeu\xfcZ\xed\x7f\xcf\xb5K\x08\x00\x00K\x08\x00\x00\r\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01V\x01\x00\x00calculator.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\xeeu\xfcZ\x96F\x91\x1bO\n\x00\x00O\n\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\xcc\t\x00\x00gui.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\xeeu\xfcZ?j\xc8$/\x06\x00\x00/\x06\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01?\x14\x00\x00tests.pyPK\x05\x06\x00\x00\x00\x00\x04\x00\x04\x00\xe7\x00\x00\x00\x94\x1a\x00\x00\x00\x00'
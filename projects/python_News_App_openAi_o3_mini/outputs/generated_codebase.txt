b'PK\x03\x04\x14\x00\x00\x00\x00\x00\xc9\\\x1b[\x9f\x8e\xd8\xbd\xd0\x03\x00\x00\xd0\x03\x00\x00\x07\x00\x00\x00main.pyimport tkinter as tk\nfrom config_manager import ConfigManager\nfrom logger_setup import get_logger\nfrom controller import Controller\nfrom ui_home import HomeScreen\n\n\ndef main():\n    # Initialize logger\n    logger = get_logger(__name__)\n    logger.info(\'Starting application...\')\n\n    # Load configuration\n    try:\n        config = ConfigManager(\'config.json\')\n    except Exception as e:\n        print(f\'Configuration error: {e}\')\n        return\n\n    # Create main Tkinter window\n    root = tk.Tk()\n    root.title(config.get(\'app_title\', \'News Reader\'))\n    root.geometry(\'800x600\')\n\n    # Initialize Controller and UI\n    controller = Controller(config, logger)\n\n    home_screen = HomeScreen(root, controller, logger)\n    home_screen.pack(fill=\'both\', expand=True)\n\n    # Start application by fetching headlines\n    controller.set_home_screen(home_screen)\n    controller.fetch_headlines()\n\n    # Kick off the mainloop\n    root.mainloop()\n\nif __name__ == \'__main__\':\n    main()\nPK\x03\x04\x14\x00\x00\x00\x00\x00\xc9\\\x1b[\x15\x97\xef\xfb\x8f\x02\x00\x00\x8f\x02\x00\x00\x11\x00\x00\x00config_manager.pyimport json\nimport os\n\n\nclass ConfigManager:\n    def __init__(self, config_file):\n        self.config_file = config_file\n        self.config = {}\n        self.load_config()\n\n    def load_config(self):\n        if not os.path.exists(self.config_file):\n            raise FileNotFoundError(f\'Configuration file {self.config_file} not found.\')\n        with open(self.config_file, \'r\') as f:\n            try:\n                self.config = json.load(f)\n            except json.JSONDecodeError as e:\n                raise ValueError(f\'Error parsing the configuration file: {e}\')\n\n    def get(self, key, default=None):\n        return self.config.get(key, default)\nPK\x03\x04\x14\x00\x00\x00\x00\x00\xc9\\\x1b[`<\xcd\xa0/\x04\x00\x00/\x04\x00\x00\x0e\x00\x00\x00api_service.pyimport requests\n\n\nclass APIService:\n    def __init__(self, config, logger):\n        self.endpoint = config.get(\'api_endpoint\')\n        self.api_key = config.get(\'api_key\')\n        self.logger = logger\n\n        if not self.endpoint or not self.api_key:\n            raise ValueError(\'API endpoint or API key is missing in the configuration.\')\n\n    def fetch_headlines(self):\n        params = {\n            \'apiKey\': self.api_key,\n            \'country\': \'us\'\n        }\n        try:\n            response = requests.get(self.endpoint, params=params, timeout=10)\n            response.raise_for_status()\n            data = response.json()\n            # Validate response structure\n            if \'articles\' not in data:\n                raise ValueError(\'Invalid data structure: "articles" key not found.\')\n            return data[\'articles\']\n        except requests.RequestException as e:\n            self.logger.error(f\'API request failed: {e}\')\n            raise\n        except ValueError as ve:\n            self.logger.error(f\'Error processing data: {ve}\')\n            raise\nPK\x03\x04\x14\x00\x00\x00\x00\x00\xc9\\\x1b[\x8a;\x8c\x195\x08\x00\x005\x08\x00\x00\r\x00\x00\x00controller.pyimport threading\nfrom api_service import APIService\n\n\nclass Controller:\n    def __init__(self, config, logger):\n        self.logger = logger\n        self.config = config\n        self.api_service = APIService(config, logger)\n        self.home_screen = None\n        # Auto-refresh interval in seconds\n        self.refresh_interval = int(config.get(\'refresh_interval\', 300))\n        self.auto_refresh_timer = None\n\n    def set_home_screen(self, home_screen):\n        self.home_screen = home_screen\n\n    def fetch_headlines(self):\n        if self.home_screen:\n            self.home_screen.show_loading()\n\n        def task():\n            try:\n                articles = self.api_service.fetch_headlines()\n                # Update UI on the main thread\n                self.home_screen.after(0, lambda: self.home_screen.update_headlines(articles))\n                self.logger.info(\'Fetched headlines successfully.\')\n            except Exception as e:\n                self.home_screen.after(0, lambda: self.home_screen.show_error(f\'Error fetching headlines: {e}\'))\n            finally:\n                # Schedule auto-refresh if enabled\n                self.schedule_auto_refresh()\n\n        # Run the API call in a separate thread to avoid UI freeze\n        threading.Thread(target=task, daemon=True).start()\n\n    def schedule_auto_refresh(self):\n        if self.refresh_interval > 0:\n            if self.auto_refresh_timer:\n                self.auto_refresh_timer.cancel()\n            self.logger.info(f\'Scheduling auto refresh in {self.refresh_interval} seconds.\')\n            self.auto_refresh_timer = threading.Timer(self.refresh_interval, self.fetch_headlines)\n            self.auto_refresh_timer.start()\n\n    def cancel_auto_refresh(self):\n        if self.auto_refresh_timer:\n            self.auto_refresh_timer.cancel()\n            self.auto_refresh_timer = None\n\n    def show_article_detail(self, article):\n        # Open a new window for article detail\n        import ui_detail\n        detail_view = ui_detail.DetailView(article, self.logger, self.home_screen.master)\n        detail_view.grab_set()\nPK\x03\x04\x14\x00\x00\x00\x00\x00\xc9\\\x1b[\xb0\xbf\xc4\x03\xbf\x08\x00\x00\xbf\x08\x00\x00\n\x00\x00\x00ui_home.pyimport tkinter as tk\nimport tkinter.messagebox as messagebox\n\n\nclass HomeScreen(tk.Frame):\n    def __init__(self, master, controller, logger, *args, **kwargs):\n        super().__init__(master, *args, **kwargs)\n        self.controller = controller\n        self.logger = logger\n        self.articles = []\n        self.create_widgets()\n\n    def create_widgets(self):\n        # Refresh Button\n        self.refresh_button = tk.Button(self, text=\'Refresh\', command=self.controller.fetch_headlines)\n        self.refresh_button.pack(pady=5)\n\n        # Loading Label\n        self.loading_label = tk.Label(self, text=\'\', fg=\'blue\')\n        self.loading_label.pack()\n\n        # Headlines Listbox with Scrollbar\n        self.listbox_frame = tk.Frame(self)\n        self.listbox_frame.pack(fill=\'both\', expand=True)\n\n        self.scrollbar = tk.Scrollbar(self.listbox_frame)\n        self.scrollbar.pack(side=\'right\', fill=\'y\')\n\n        self.headlines_listbox = tk.Listbox(self.listbox_frame, yscrollcommand=self.scrollbar.set)\n        self.headlines_listbox.pack(side=\'left\', fill=\'both\', expand=True)\n        self.headlines_listbox.bind(\'<<ListboxSelect>>\', self.on_article_select)\n        self.scrollbar.config(command=self.headlines_listbox.yview)\n\n    def show_loading(self):\n        self.loading_label.config(text=\'Loading headlines...\')\n\n    def update_headlines(self, articles):\n        self.loading_label.config(text=\'\')\n        self.headlines_listbox.delete(0, tk.END)\n        self.articles = articles\n        if not articles:\n            self.show_error(\'No articles found.\')\n            return\n        for idx, article in enumerate(articles):\n            title = article.get(\'title\', \'No Title\')\n            snippet = article.get(\'description\', \'No Description\')\n            self.headlines_listbox.insert(tk.END, f\'{title} - {snippet}\')\n\n    def show_error(self, message):\n        self.loading_label.config(text=\'\')\n        self.logger.error(message)\n        messagebox.showerror(\'Error\', message)\n\n    def on_article_select(self, event):\n        selection = event.widget.curselection()\n        if selection:\n            index = selection[0]\n            article = self.articles[index]\n            self.controller.show_article_detail(article)\nPK\x03\x04\x14\x00\x00\x00\x00\x00\xc9\\\x1b[\xad\xafP\xea\xe5\x07\x00\x00\xe5\x07\x00\x00\x0c\x00\x00\x00ui_detail.pyimport tkinter as tk\nimport tkinter.messagebox as messagebox\nimport webbrowser\n\n\nclass DetailView(tk.Toplevel):\n    def __init__(self, article, logger, master=None, *args, **kwargs):\n        super().__init__(master, *args, **kwargs)\n        self.article = article\n        self.logger = logger\n        self.title(article.get(\'title\', \'Article Detail\'))\n        self.geometry(\'600x400\')\n        self.create_widgets()\n\n    def create_widgets(self):\n        # Article Title\n        title = self.article.get(\'title\', \'No Title\')\n        self.title_label = tk.Label(self, text=title, font=(\'Arial\', 16, \'bold\'))\n        self.title_label.pack(pady=10)\n\n        # Article Metadata\n        metadata = \'\'\n        author = self.article.get(\'author\')\n        published_at = self.article.get(\'publishedAt\')\n        if author:\n            metadata += f\'Author: {author}  \'\n        if published_at:\n            metadata += f\'Published: {published_at}\'\n        self.metadata_label = tk.Label(self, text=metadata, font=(\'Arial\', 10))\n        self.metadata_label.pack(pady=5)\n\n        # Article Content\n        content = self.article.get(\'content\', \'Full content not available.\')\n        self.content_text = tk.Text(self, wrap=\'word\', height=10)\n        self.content_text.insert(tk.END, content)\n        self.content_text.config(state=\'disabled\')\n        self.content_text.pack(padx=10, pady=10, fill=\'both\', expand=True)\n\n        # Link to original article\n        url = self.article.get(\'url\')\n        if url:\n            self.link_button = tk.Button(self, text=\'Read Full Article\', command=lambda: self.open_link(url))\n            self.link_button.pack(pady=5)\n\n        # Back Button\n        self.back_button = tk.Button(self, text=\'Back\', command=self.destroy)\n        self.back_button.pack(pady=5)\n\n    def open_link(self, url):\n        try:\n            webbrowser.open(url)\n        except Exception as e:\n            self.logger.error(f\'Failed to open URL: {e}\')\n            messagebox.showerror(\'Error\', \'Failed to open the link.\')\nPK\x03\x04\x14\x00\x00\x00\x00\x00\xc9\\\x1b[,\xb4.\xec\xc6\x01\x00\x00\xc6\x01\x00\x00\x0f\x00\x00\x00logger_setup.pyimport logging\nimport sys\n\n\ndef get_logger(name):\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.INFO)\n\n    if not logger.handlers:\n        # Console handler\n        ch = logging.StreamHandler(sys.stdout)\n        ch.setLevel(logging.INFO)\n        formatter = logging.Formatter(\'[%(asctime)s] [%(levelname)s] %(name)s: %(message)s\', \'%Y-%m-%d %H:%M:%S\')\n        ch.setFormatter(formatter)\n        logger.addHandler(ch)\n    return logger\nPK\x03\x04\x14\x00\x00\x00\x00\x00\xc9\\\x1b[\xc1AW\xc0\xa4\x00\x00\x00\xa4\x00\x00\x00\x0b\x00\x00\x00config.json{\n  "app_title": "Lightweight News Reader",\n  "api_endpoint": "https://newsapi.org/v2/top-headlines",\n  "api_key": "YOUR_API_KEY_HERE",\n  "refresh_interval": 300\n}\nPK\x03\x04\x14\x00\x00\x00\x00\x00\xc9\\\x1b[\xd6^#\x98\x11\x00\x00\x00\x11\x00\x00\x00\x10\x00\x00\x00requirements.txtrequests==2.31.0\nPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\xc9\\\x1b[\x9f\x8e\xd8\xbd\xd0\x03\x00\x00\xd0\x03\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\x00\x00\x00\x00main.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\xc9\\\x1b[\x15\x97\xef\xfb\x8f\x02\x00\x00\x8f\x02\x00\x00\x11\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\xf5\x03\x00\x00config_manager.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\xc9\\\x1b[`<\xcd\xa0/\x04\x00\x00/\x04\x00\x00\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\xb3\x06\x00\x00api_service.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\xc9\\\x1b[\x8a;\x8c\x195\x08\x00\x005\x08\x00\x00\r\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\x0e\x0b\x00\x00controller.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\xc9\\\x1b[\xb0\xbf\xc4\x03\xbf\x08\x00\x00\xbf\x08\x00\x00\n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01n\x13\x00\x00ui_home.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\xc9\\\x1b[\xad\xafP\xea\xe5\x07\x00\x00\xe5\x07\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01U\x1c\x00\x00ui_detail.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\xc9\\\x1b[,\xb4.\xec\xc6\x01\x00\x00\xc6\x01\x00\x00\x0f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01d$\x00\x00logger_setup.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\xc9\\\x1b[\xc1AW\xc0\xa4\x00\x00\x00\xa4\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01W&\x00\x00config.jsonPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\xc9\\\x1b[\xd6^#\x98\x11\x00\x00\x00\x11\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01$\'\x00\x00requirements.txtPK\x05\x06\x00\x00\x00\x00\t\x00\t\x00\x11\x02\x00\x00c\'\x00\x00\x00\x00'
b'PK\x03\x04\x14\x00\x00\x00\x00\x00T[*[g\x05OI\xc7\x00\x00\x00\xc7\x00\x00\x00\x07\x00\x00\x00main.pyimport tkinter as tk\nfrom gui import App\n\n\ndef main():\n    root = tk.Tk()\n    root.title(\'Screenshot Comparison Tool\')\n    app = App(root)\n    root.mainloop()\n\n\nif __name__ == \'__main__\':\n    main()\nPK\x03\x04\x14\x00\x00\x00\x00\x00T[*[7\x8b+rj\x17\x00\x00j\x17\x00\x00\x06\x00\x00\x00gui.pyimport os\nimport tkinter as tk\nfrom tkinter import filedialog, messagebox, ttk\nfrom PIL import Image, ImageTk, ImageChops, ImageDraw\n\nfrom image_comparator import compare_images\nfrom config_manager import load_config, save_config\nfrom database import log_comparison\n\n\nclass App:\n    def __init__(self, master):\n        self.master = master\n        self.config = load_config()\n\n        self.img1_path = None\n        self.img2_path = None\n        self.img1 = None\n        self.img2 = None\n        self.diff_image = None\n\n        self.create_widgets()\n\n    def create_widgets(self):\n        # Frame for file selection\n        file_frame = tk.Frame(self.master)\n        file_frame.pack(pady=10)\n\n        btn_select_img1 = tk.Button(file_frame, text=\'Select Image 1\', command=self.load_image1)\n        btn_select_img1.grid(row=0, column=0, padx=5)\n\n        btn_select_img2 = tk.Button(file_frame, text=\'Select Image 2\', command=self.load_image2)\n        btn_select_img2.grid(row=0, column=1, padx=5)\n\n        # Tolerance setting\n        tolerance_frame = tk.Frame(self.master)\n        tolerance_frame.pack(pady=5)\n        tk.Label(tolerance_frame, text=\'Tolerance:\').grid(row=0, column=0, padx=5)\n        self.tolerance_var = tk.IntVar(value=self.config.get(\'tolerance\', 10))\n        self.scale = tk.Scale(tolerance_frame, from_=0, to=255, orient=tk.HORIZONTAL, variable=self.tolerance_var)\n        self.scale.grid(row=0, column=1, padx=5)\n        \n        # Button to run comparison\n        btn_compare = tk.Button(self.master, text=\'Compare Images\', command=self.compare)\n        btn_compare.pack(pady=5)\n\n        # Frame for displaying images\n        self.display_frame = tk.Frame(self.master)\n        self.display_frame.pack(padx=10, pady=10)\n\n        self.label_img1 = tk.Label(self.display_frame, text=\'Image 1\')\n        self.label_img1.grid(row=0, column=0, padx=10)\n        self.label_img2 = tk.Label(self.display_frame, text=\'Image 2\')\n        self.label_img2.grid(row=0, column=1, padx=10)\n        self.label_diff = tk.Label(self.display_frame, text=\'Diff Image\')\n        self.label_diff.grid(row=0, column=2, padx=10)\n\n        self.canvas_img1 = tk.Label(self.display_frame)\n        self.canvas_img1.grid(row=1, column=0, padx=10)\n        self.canvas_img2 = tk.Label(self.display_frame)\n        self.canvas_img2.grid(row=1, column=1, padx=10)\n        self.canvas_diff = tk.Label(self.display_frame)\n        self.canvas_diff.grid(row=1, column=2, padx=10)\n\n        # Button to export diff image\n        btn_export = tk.Button(self.master, text=\'Export Diff Image\', command=self.export_diff)\n        btn_export.pack(pady=5)\n\n    def load_image1(self):\n        file_path = filedialog.askopenfilename(title=\'Select the first image\', \n                                               filetypes=[(\'Image Files\', \'*.png;*.jpg;*.jpeg;*.bmp\')])\n        if file_path:\n            try:\n                self.img1 = Image.open(file_path)\n                self.img1_path = file_path\n                self.display_image(self.img1, self.canvas_img1)\n            except Exception as e:\n                messagebox.showerror(\'Error\', f\'Failed to load image 1: {str(e)}\')\n\n    def load_image2(self):\n        file_path = filedialog.askopenfilename(title=\'Select the second image\', \n                                               filetypes=[(\'Image Files\', \'*.png;*.jpg;*.jpeg;*.bmp\')])\n        if file_path:\n            try:\n                self.img2 = Image.open(file_path)\n                self.img2_path = file_path\n                self.display_image(self.img2, self.canvas_img2)\n            except Exception as e:\n                messagebox.showerror(\'Error\', f\'Failed to load image 2: {str(e)}\')\n\n    def display_image(self, pil_image, canvas_label, max_size=(300, 300)):\n        # Resize image to fit a maximum display size\n        img = pil_image.copy()\n        img.thumbnail(max_size)\n        photo = ImageTk.PhotoImage(img)\n        canvas_label.configure(image=photo)\n        canvas_label.image = photo  # keep a reference to avoid garbage collection\n\n    def compare(self):\n        if not self.img1 or not self.img2:\n            messagebox.showerror(\'Error\', \'Please select both images before comparing.\')\n            return\n\n        tolerance = self.tolerance_var.get()\n        try:\n            # Compare images using the image_comparator module\n            self.diff_image = compare_images(self.img1, self.img2, tolerance)\n            if self.diff_image:\n                self.display_image(self.diff_image, self.canvas_diff)\n                messagebox.showinfo(\'Success\', \'Comparison completed. Diff image generated.\')\n                log_comparison(self.img1_path, self.img2_path, tolerance, \'Success\')\n            else:\n                messagebox.showerror(\'Error\', \'Images have different dimensions. Please adjust them before comparing.\')\n                log_comparison(self.img1_path, self.img2_path, tolerance, \'Dimension mismatch\')\n        except Exception as e:\n            messagebox.showerror(\'Error\', f\'Comparison failed: {str(e)}\')\n            log_comparison(self.img1_path, self.img2_path, tolerance, f\'Error: {str(e)}\')\n\n    def export_diff(self):\n        if self.diff_image is None:\n            messagebox.showerror(\'Error\', \'No diff image available. Please perform a comparison first.\')\n            return\n\n        # Choose export file location\n        export_dir = filedialog.askdirectory(title=\'Select export directory\')\n        if not export_dir:\n            return\n\n        default_filename = \'diff_image.png\'\n        export_path = os.path.join(export_dir, default_filename)\n        try:\n            self.diff_image.save(export_path)\n            messagebox.showinfo(\'Success\', f\'Diff image saved to {export_path}\')\n        except Exception as e:\n            messagebox.showerror(\'Error\', f\'Failed to save diff image: {str(e)}\')\n\n        # Optionally update configuration with new export directory\n        self.config[\'export_directory\'] = export_dir\n        save_config(self.config)\nPK\x03\x04\x14\x00\x00\x00\x00\x00T[*[\xc5*\x94@\xb8\x05\x00\x00\xb8\x05\x00\x00\x13\x00\x00\x00image_comparator.pyfrom PIL import ImageChops, Image, ImageDraw\n\n\ndef compare_images(img1, img2, tolerance=10):\n    """\n    Compare two images pixel by pixel. If dimensions differ, return None.\n    Otherwise, generate a diff image highlighting pixel differences with a red overlay.\n    The tolerance parameter defines the sensitivity threshold.\n    """\n    if img1.size != img2.size:\n        # Images have different dimensions\n        return None\n\n    # Compute the difference between images\n    diff = ImageChops.difference(img1, img2)\n\n    # Create an output image to highlight differences\n    # We\'ll overlay red on the areas where difference exceeds the tolerance\n    diff_overlay = img1.convert(\'RGBA\')\n    overlay = Image.new(\'RGBA\', img1.size, (255, 0, 0, 0))\n    draw = ImageDraw.Draw(overlay)\n\n    # Load pixel data\n    pix_diff = diff.load()\n    width, height = diff.size\n    for x in range(width):\n        for y in range(height):\n            # Sum the absolute differences across channels\n            if isinstance(pix_diff[x, y], int):\n                # Grayscale image\n                delta = pix_diff[x, y]\n            else:\n                delta = sum(pix_diff[x, y]) / len(pix_diff[x, y])\n            if delta > tolerance:\n                # Mark this pixel with a semi-transparent red dot\n                draw.point((x, y), fill=(255, 0, 0, 150))\n\n    # Composite the overlay\n    result = Image.alpha_composite(diff_overlay, overlay)\n    return result.convert(\'RGB\')\nPK\x03\x04\x14\x00\x00\x00\x00\x00T[*[\xea\x85q;O\x04\x00\x00O\x04\x00\x00\x11\x00\x00\x00config_manager.pyimport json\nimport os\n\nCONFIG_FILE = \'config.json\'\n\n\ndef load_config():\n    """\n    Load configuration from CONFIG_FILE. If file does not exist, return default settings.\n    """\n    default_config = {\n        "tolerance": 10,\n        "export_directory": ".",\n        "ui_theme": "default"\n    }\n\n    if os.path.exists(CONFIG_FILE):\n        try:\n            with open(CONFIG_FILE, \'r\') as f:\n                config = json.load(f)\n                # Merge with default to ensure all keys exist\n                for key in default_config:\n                    if key not in config:\n                        config[key] = default_config[key]\n                return config\n        except Exception as e:\n            print(f\'Error loading config: {e}. Using default configuration.\')\n            return default_config\n    else:\n        return default_config\n\n\ndef save_config(config):\n    """\n    Save the given configuration to CONFIG_FILE.\n    """\n    try:\n        with open(CONFIG_FILE, \'w\') as f:\n            json.dump(config, f, indent=4)\n    except Exception as e:\n        print(f\'Error saving config: {e}\')\nPK\x03\x04\x14\x00\x00\x00\x00\x00T[*[XB\x0c\xafk\x04\x00\x00k\x04\x00\x00\x0b\x00\x00\x00database.pyimport sqlite3\nimport os\n\nDB_FILE = \'app_logs.db\'\n\n\ndef init_db():\n    """\n    Initialize the SQLite3 database with a table for logging comparisons.\n    """\n    conn = sqlite3.connect(DB_FILE)\n    c = conn.cursor()\n    c.execute(\'\'\'\n        CREATE TABLE IF NOT EXISTS comparisons (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            img1_path TEXT,\n            img2_path TEXT,\n            tolerance INTEGER,\n            status TEXT,\n            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP\n        )\n    \'\'\')\n    conn.commit()\n    conn.close()\n\n\ndef log_comparison(img1_path, img2_path, tolerance, status):\n    """\n    Log the comparison event with details into the database.\n    """\n    if not os.path.exists(DB_FILE):\n        init_db()\n    try:\n        conn = sqlite3.connect(DB_FILE)\n        c = conn.cursor()\n        c.execute(\'\'\'\n            INSERT INTO comparisons (img1_path, img2_path, tolerance, status) \n            VALUES (?, ?, ?, ?)\n        \'\'\', (img1_path, img2_path, tolerance, status))\n        conn.commit()\n        conn.close()\n    except Exception as e:\n        print(f\'Error logging comparison: {e}\')\nPK\x03\x04\x14\x00\x00\x00\x00\x00T[*[O\xe5\xdeg#\x00\x00\x00#\x00\x00\x00\x10\x00\x00\x00requirements.txtPillow>=9.0.0\nopencv-python>=4.0.0\nPK\x03\x04\x14\x00\x00\x00\x00\x00T[*[1\xd5\xedfP\x00\x00\x00P\x00\x00\x00\x0b\x00\x00\x00config.json{\n    "tolerance": 10,\n    "export_directory": ".",\n    "ui_theme": "default"\n}\nPK\x03\x04\x14\x00\x00\x00\x00\x00T[*[\xfb\xcb\x99\xef?\x01\x00\x00?\x01\x00\x00\x10\x00\x00\x00inputs/goals.txtCreate a tool that compares two screenshots and highlights visual differences.\nThe result should be a functional application with a UI, so if necessary, create required config files.\nFeatures:\n- Accept two image files as input\n- Detect and highlight pixel-level differences\n- Export diff images to a specified directoryPK\x03\x04\x14\x00\x00\x00\x00\x00T[*[)\x00:\xbb:\x00\x00\x00:\x00\x00\x00\x16\x00\x00\x00inputs/environment.txtTechnology stack: Use Python, Pillow, OpenCV, and SQLite3.PK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00T[*[g\x05OI\xc7\x00\x00\x00\xc7\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\x00\x00\x00\x00main.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00T[*[7\x8b+rj\x17\x00\x00j\x17\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\xec\x00\x00\x00gui.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00T[*[\xc5*\x94@\xb8\x05\x00\x00\xb8\x05\x00\x00\x13\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01z\x18\x00\x00image_comparator.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00T[*[\xea\x85q;O\x04\x00\x00O\x04\x00\x00\x11\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01c\x1e\x00\x00config_manager.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00T[*[XB\x0c\xafk\x04\x00\x00k\x04\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\xe1"\x00\x00database.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00T[*[O\xe5\xdeg#\x00\x00\x00#\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01u\'\x00\x00requirements.txtPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00T[*[1\xd5\xedfP\x00\x00\x00P\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\xc6\'\x00\x00config.jsonPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00T[*[\xfb\xcb\x99\xef?\x01\x00\x00?\x01\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01?(\x00\x00inputs/goals.txtPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00T[*[)\x00:\xbb:\x00\x00\x00:\x00\x00\x00\x16\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\xac)\x00\x00inputs/environment.txtPK\x05\x06\x00\x00\x00\x00\t\x00\t\x00\x1b\x02\x00\x00\x1a*\x00\x00\x00\x00'
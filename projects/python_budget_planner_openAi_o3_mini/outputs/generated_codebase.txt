b'PK\x03\x04\x14\x00\x00\x00\x00\x00Jv\x1b[0\x9a]\xbd:\x01\x00\x00:\x01\x00\x00\x0b\x00\x00\x00config.json{\n  "database": {\n    "uri": "sqlite:///budget_planner.db"\n  },\n  "server": {\n    "port": 5000,\n    "environment": "development"\n  },\n  "charts": {\n    "defaultType": "bar",\n    "supportedTypes": ["bar", "pie"]\n  },\n  "reports": {\n    "monthly": true,\n    "yearly": true,\n    "exportFormats": ["pdf", "csv"]\n  }\n}\nPK\x03\x04\x14\x00\x00\x00\x00\x00Jv\x1b[\xfc\x9a\xfe\xf4E\x00\x00\x00E\x00\x00\x00\x10\x00\x00\x00requirements.txtFlask==2.2.5\nFlask-SQLAlchemy==3.0.5\npandas==1.5.3\nmatplotlib==3.6.3\nPK\x03\x04\x14\x00\x00\x00\x00\x00Jv\x1b[\xbf\x17Y\xd0\xd4\x01\x00\x00\xd4\x01\x00\x00\x0b\x00\x00\x00database.pyfrom flask_sqlalchemy import SQLAlchemy\nfrom flask import Flask\nimport json\n\n# Load configuration\nwith open(\'config.json\') as config_file:\n    config = json.load(config_file)\n\napp = Flask(__name__)\napp.config[\'SQLALCHEMY_DATABASE_URI\'] = config[\'database\'][\'uri\']\napp.config[\'SQLALCHEMY_TRACK_MODIFICATIONS\'] = False\n\ndb = SQLAlchemy(app)\n\nif __name__ == \'__main__\':\n    app.run(port=config[\'server\'][\'port\'], debug=(config[\'server\'][\'environment\'] == \'development\'))\nPK\x03\x04\x14\x00\x00\x00\x00\x00Jv\x1b[\x89\xb7\xbc\xc6\xa5\x03\x00\x00\xa5\x03\x00\x00\t\x00\x00\x00models.pyfrom database import db\nfrom datetime import datetime\n\nclass Category(db.Model):\n    __tablename__ = \'categories\'\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(50), unique=True, nullable=False)\n    type = db.Column(db.String(10), nullable=False)  # \'Income\' or \'Expense\'\n    transactions = db.relationship(\'Transaction\', backref=\'category\', lazy=True)\n\n    def __repr__(self):\n        return f"<Category {self.name}: {self.type}>"\n\n\nclass Transaction(db.Model):\n    __tablename__ = \'transactions\'\n    id = db.Column(db.Integer, primary_key=True)\n    date = db.Column(db.Date, default=datetime.utcnow, nullable=False)\n    amount = db.Column(db.Float, nullable=False)\n    description = db.Column(db.String(255))\n    category_id = db.Column(db.Integer, db.ForeignKey(\'categories.id\'), nullable=False)\n    \n    def __repr__(self):\n        return f"<Transaction {self.id}: {self.amount} on {self.date}>"\nPK\x03\x04\x14\x00\x00\x00\x00\x00Jv\x1b[\x82\xc8ru.\r\x00\x00.\r\x00\x00\x0b\x00\x00\x00services.pyfrom models import Transaction, Category\nfrom database import db\nfrom datetime import datetime\n\n# Transaction Services\n\ndef add_transaction(data):\n    try:\n        # Data should contain: date, amount, description, category_id\n        date = datetime.strptime(data.get(\'date\'), \'%Y-%m-%d\')\n        amount = float(data.get(\'amount\'))\n        description = data.get(\'description\')\n        category_id = int(data.get(\'category_id\'))\n\n        transaction = Transaction(date=date, amount=amount, description=description, category_id=category_id)\n        db.session.add(transaction)\n        db.session.commit()\n        return transaction\n    except Exception as e:\n        db.session.rollback()\n        raise e\n\n\ndef update_transaction(transaction_id, data):\n    try:\n        transaction = Transaction.query.get(transaction_id)\n        if not transaction:\n            raise ValueError(\'Transaction not found\')\n\n        if \'date\' in data:\n            transaction.date = datetime.strptime(data.get(\'date\'), \'%Y-%m-%d\')\n        if \'amount\' in data:\n            transaction.amount = float(data.get(\'amount\'))\n        if \'description\' in data:\n            transaction.description = data.get(\'description\')\n        if \'category_id\' in data:\n            transaction.category_id = int(data.get(\'category_id\'))\n\n        db.session.commit()\n        return transaction\n    except Exception as e:\n        db.session.rollback()\n        raise e\n\n\ndef delete_transaction(transaction_id):\n    try:\n        transaction = Transaction.query.get(transaction_id)\n        if not transaction:\n            raise ValueError(\'Transaction not found\')\n        db.session.delete(transaction)\n        db.session.commit()\n        return True\n    except Exception as e:\n        db.session.rollback()\n        raise e\n\n# Category Services\n\ndef add_category(data):\n    try:\n        name = data.get(\'name\')\n        type_ = data.get(\'type\')  # Should be \'Income\' or \'Expense\'\n        category = Category(name=name, type=type_)\n        db.session.add(category)\n        db.session.commit()\n        return category\n    except Exception as e:\n        db.session.rollback()\n        raise e\n\n\ndef update_category(category_id, data):\n    try:\n        category = Category.query.get(category_id)\n        if not category:\n            raise ValueError(\'Category not found\')\n        if \'name\' in data:\n            category.name = data.get(\'name\')\n        if \'type\' in data:\n            category.type = data.get(\'type\')\n        db.session.commit()\n        return category\n    except Exception as e:\n        db.session.rollback()\n        raise e\n\n\ndef delete_category(category_id, reassign_category_id=None):\n    try:\n        category = Category.query.get(category_id)\n        if not category:\n            raise ValueError(\'Category not found\')\n        \n        # Reassign transactions if provided\n        if reassign_category_id:\n            transactions = category.transactions\n            for transaction in transactions:\n                transaction.category_id = reassign_category_id\n        else:\n            # Alternatively, archive or delete associated transactions\n            for transaction in category.transactions:\n                db.session.delete(transaction)\n\n        db.session.delete(category)\n        db.session.commit()\n        return True\n    except Exception as e:\n        db.session.rollback()\n        raise e\nPK\x03\x04\x14\x00\x00\x00\x00\x00Jv\x1b[\xdf\xf6\xd0\xd2\x0c\x0f\x00\x00\x0c\x0f\x00\x00\x0e\x00\x00\x00controllers.pyfrom flask import Blueprint, request, jsonify\nfrom services import add_transaction, update_transaction, delete_transaction, add_category, update_category, delete_category\nfrom models import Transaction, Category\nfrom database import db\n\napi = Blueprint(\'api\', __name__)\n\n# Transaction Endpoints\n@api.route(\'/transactions\', methods=[\'POST\'])\ndef create_transaction():\n    data = request.get_json()\n    try:\n        transaction = add_transaction(data)\n        return jsonify({\'message\': \'Transaction added\', \'transaction\': {\n            \'id\': transaction.id,\n            \'date\': transaction.date.strftime(\'%Y-%m-%d\'),\n            \'amount\': transaction.amount,\n            \'description\': transaction.description,\n            \'category_id\': transaction.category_id\n        }}), 201\n    except Exception as e:\n        return jsonify({\'error\': str(e)}), 400\n\n@api.route(\'/transactions/<int:transaction_id>\', methods=[\'PUT\'])\ndef edit_transaction(transaction_id):\n    data = request.get_json()\n    try:\n        transaction = update_transaction(transaction_id, data)\n        return jsonify({\'message\': \'Transaction updated\', \'transaction\': {\n            \'id\': transaction.id,\n            \'date\': transaction.date.strftime(\'%Y-%m-%d\'),\n            \'amount\': transaction.amount,\n            \'description\': transaction.description,\n            \'category_id\': transaction.category_id\n        }}), 200\n    except Exception as e:\n        return jsonify({\'error\': str(e)}), 400\n\n@api.route(\'/transactions/<int:transaction_id>\', methods=[\'DELETE\'])\n    \n def remove_transaction(transaction_id):\n    try:\n        delete_transaction(transaction_id)\n        return jsonify({\'message\': \'Transaction deleted\'}), 200\n    except Exception as e:\n        return jsonify({\'error\': str(e)}), 400\n\n# Category Endpoints\n@api.route(\'/categories\', methods=[\'POST\'])\ndef create_category():\n    data = request.get_json()\n    try:\n        category = add_category(data)\n        return jsonify({\'message\': \'Category added\', \'category\': {\n            \'id\': category.id,\n            \'name\': category.name,\n            \'type\': category.type\n        }}), 201\n    except Exception as e:\n        return jsonify({\'error\': str(e)}), 400\n\n@api.route(\'/categories/<int:category_id>\', methods=[\'PUT\'])\n\ndef edit_category(category_id):\n    data = request.get_json()\n    try:\n        category = update_category(category_id, data)\n        return jsonify({\'message\': \'Category updated\', \'category\': {\n            \'id\': category.id,\n            \'name\': category.name,\n            \'type\': category.type\n        }}), 200\n    except Exception as e:\n        return jsonify({\'error\': str(e)}), 400\n\n@api.route(\'/categories/<int:category_id>\', methods=[\'DELETE\'])\n\ndef remove_category(category_id):\n    reassign_id = request.args.get(\'reassign_category_id\')\n    try:\n        if reassign_id:\n            reassign_id = int(reassign_id)\n        delete_category(category_id, reassign_category_id=reassign_id)\n        return jsonify({\'message\': \'Category deleted\'}), 200\n    except Exception as e:\n        return jsonify({\'error\': str(e)}), 400\n\n# Additional endpoints to get list of transactions and categories\n@api.route(\'/transactions\', methods=[\'GET\'])\n def get_transactions():\n    transactions = Transaction.query.all()\n    result = []\n    for t in transactions:\n        result.append({\n            \'id\': t.id,\n            \'date\': t.date.strftime(\'%Y-%m-%d\'),\n            \'amount\': t.amount,\n            \'description\': t.description,\n            \'category_id\': t.category_id\n        })\n    return jsonify(result), 200\n\n@api.route(\'/categories\', methods=[\'GET\'])\n def get_categories():\n    categories = Category.query.all()\n    result = []\n    for c in categories:\n        result.append({\n            \'id\': c.id,\n            \'name\': c.name,\n            \'type\': c.type\n        })\n    return jsonify(result), 200\nPK\x03\x04\x14\x00\x00\x00\x00\x00Jv\x1b[(}{\xd1\x1f\x0b\x00\x00\x1f\x0b\x00\x00\x10\x00\x00\x00visualization.pyimport io\nimport base64\nfrom flask import Blueprint, jsonify, send_file, request\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom models import Transaction, Category\nfrom database import db\n\nviz = Blueprint(\'viz\', __name__)\n\n# Helper to generate chart from DataFrame\n def generate_bar_chart(df, title):\n    plt.figure(figsize=(10,6))\n    df.plot(kind=\'bar\', legend=True)\n    plt.title(title)\n    plt.tight_layout()\n    buf = io.BytesIO()\n    plt.savefig(buf, format=\'png\')\n    buf.seek(0)\n    image_base64 = base64.b64encode(buf.getvalue()).decode(\'utf-8\')\n    plt.close()\n    return image_base64\n\n@viz.route(\'/reports/monthly\', methods=[\'GET\'])\n def monthly_report():\n    # Aggregate transactions by month\n    transactions = Transaction.query.all()\n    data = []\n    for t in transactions:\n        data.append({\n            \'date\': t.date,\n            \'amount\': t.amount\n        })\n    if not data:\n        return jsonify({\'error\': \'No transactions found\'}), 404\n\n    df = pd.DataFrame(data)\n    df[\'month\'] = df[\'date\'].dt.to_period(\'M\')\n    summary = df.groupby(\'month\')[\'amount\'].sum()\n    # Generate bar chart\n    chart = generate_bar_chart(summary, \'Monthly Transaction Summary\')\n    return jsonify({\'chart\': chart, \'summary\': summary.to_dict()}), 200\n\n@viz.route(\'/reports/yearly\', methods=[\'GET\'])\n def yearly_report():\n    # Aggregate transactions by year\n    transactions = Transaction.query.all()\n    data = []\n    for t in transactions:\n        data.append({\n            \'date\': t.date,\n            \'amount\': t.amount\n        })\n    if not data:\n        return jsonify({\'error\': \'No transactions found\'}), 404\n\n    df = pd.DataFrame(data)\n    df[\'year\'] = df[\'date\'].dt.year\n    summary = df.groupby(\'year\')[\'amount\'].sum()\n    chart = generate_bar_chart(summary, \'Yearly Transaction Summary\')\n    return jsonify({\'chart\': chart, \'summary\': summary.to_dict()}), 200\n\n@viz.route(\'/charts/pie\', methods=[\'GET\'])\n def pie_chart_expenses():\n    # Generate a pie chart based on expenses per category\n    transactions = Transaction.query.join(Category).filter(Category.type==\'Expense\').all()\n    if not transactions:\n        return jsonify({\'error\': \'No expense transactions found\'}), 404\n\n    data = {}\n    for t in transactions:\n        cat = t.category.name\n        data[cat] = data.get(cat, 0) + t.amount\n    if not data:\n        return jsonify({\'error\': \'No data for pie chart\'}), 404\n\n    labels = list(data.keys())\n    sizes = list(data.values())\n    plt.figure(figsize=(8,8))\n    plt.pie(sizes, labels=labels, autopct=\'%1.1f%%\', startangle=140)\n    plt.title(\'Expenses Distribution by Category\')\n    plt.axis(\'equal\')\n    buf = io.BytesIO()\n    plt.savefig(buf, format=\'png\')\n    buf.seek(0)\n    image_base64 = base64.b64encode(buf.getvalue()).decode(\'utf-8\')\n    plt.close()\n    return jsonify({\'chart\': image_base64}), 200\nPK\x03\x04\x14\x00\x00\x00\x00\x00Jv\x1b[\x9d\xdd\xae\x13k\x02\x00\x00k\x02\x00\x00\x06\x00\x00\x00app.pyfrom flask import Flask, jsonify\nfrom database import app, db\nfrom controllers import api\nfrom visualization import viz\nimport os\n\n# Register Blueprints\napp.register_blueprint(api, url_prefix=\'/api\')\napp.register_blueprint(viz, url_prefix=\'/api\')\n\n# Global error handler\n@app.errorhandler(Exception)\n def handle_exception(e):\n    # Here you can add logging e.g. to a file\n    return jsonify({\'error\': str(e)}), 500\n\nif __name__ == \'__main__\':\n    # Create database tables if they don\'t exist\n    if not os.path.exists(\'budget_planner.db\'):\n        with app.app_context():\n            db.create_all()\n    \n    app.run()\nPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00Jv\x1b[0\x9a]\xbd:\x01\x00\x00:\x01\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\x00\x00\x00\x00config.jsonPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00Jv\x1b[\xfc\x9a\xfe\xf4E\x00\x00\x00E\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01c\x01\x00\x00requirements.txtPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00Jv\x1b[\xbf\x17Y\xd0\xd4\x01\x00\x00\xd4\x01\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\xd6\x01\x00\x00database.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00Jv\x1b[\x89\xb7\xbc\xc6\xa5\x03\x00\x00\xa5\x03\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\xd3\x03\x00\x00models.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00Jv\x1b[\x82\xc8ru.\r\x00\x00.\r\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\x9f\x07\x00\x00services.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00Jv\x1b[\xdf\xf6\xd0\xd2\x0c\x0f\x00\x00\x0c\x0f\x00\x00\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\xf6\x14\x00\x00controllers.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00Jv\x1b[(}{\xd1\x1f\x0b\x00\x00\x1f\x0b\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01.$\x00\x00visualization.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00Jv\x1b[\x9d\xdd\xae\x13k\x02\x00\x00k\x02\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01{/\x00\x00app.pyPK\x05\x06\x00\x00\x00\x00\x08\x00\x08\x00\xce\x01\x00\x00\n2\x00\x00\x00\x00'
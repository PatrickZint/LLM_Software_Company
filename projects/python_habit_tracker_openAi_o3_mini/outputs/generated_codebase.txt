b'PK\x03\x04\x14\x00\x00\x00\x00\x00V\x92)[\x8ef\x02\x18\xe0\x03\x00\x00\xe0\x03\x00\x00\x0b\x00\x00\x00database.pyimport sqlite3\n\nDB_NAME = \'habits.db\'\n\ndef get_connection():\n    return sqlite3.connect(DB_NAME)\n\n\ndef init_db():\n    conn = get_connection()\n    cursor = conn.cursor()\n\n    # Create table for habits\n    cursor.execute(\'\'\'\n    CREATE TABLE IF NOT EXISTS habit (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        title TEXT NOT NULL,\n        description TEXT,\n        goal TEXT NOT NULL,\n        schedule TEXT NOT NULL,\n        start_date TEXT NOT NULL,\n        end_date TEXT,\n        category TEXT\n    )\n    \'\'\')\n\n    # Create table for habit logs/completions\n    cursor.execute(\'\'\'\n    CREATE TABLE IF NOT EXISTS habit_log (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        habit_id INTEGER NOT NULL,\n        log_date TEXT NOT NULL,\n        status TEXT NOT NULL,\n        notes TEXT,\n        FOREIGN KEY (habit_id) REFERENCES habit(id) ON DELETE CASCADE\n    )\n    \'\'\')\n\n    conn.commit()\n    conn.close()\n\n\nif __name__ == \'__main__\':\n    init_db()\n    print(\'Database initialized.\')\nPK\x03\x04\x14\x00\x00\x00\x00\x00V\x92)[\xfa(s\xe3\x9a\x01\x00\x00\x9a\x01\x00\x00\t\x00\x00\x00models.pyfrom dataclasses import dataclass\n\n@dataclass\nclass Habit:\n    id: int = None\n    title: str = ""\n    description: str = ""\n    goal: str = ""\n    schedule: str = ""\n    start_date: str = ""\n    end_date: str = None\n    category: str = ""\n\n\n@dataclass\nclass HabitLog:\n    id: int = None\n    habit_id: int = None\n    log_date: str = ""\n    status: str = ""  # e.g., \'completed\' or \'skipped\'\n    notes: str = ""\nPK\x03\x04\x14\x00\x00\x00\x00\x00V\x92)[\xc0\x1a\xe3\xe0i\x0c\x00\x00i\x0c\x00\x00\x10\x00\x00\x00habit_manager.pyimport sqlite3\nfrom database import get_connection\nfrom models import Habit, HabitLog\n\n\ndef create_habit(title, description, goal, schedule, start_date, end_date=None, category=None):\n    conn = get_connection()\n    cursor = conn.cursor()\n\n    cursor.execute(\'\'\'\n        INSERT INTO habit (title, description, goal, schedule, start_date, end_date, category) \n        VALUES (?, ?, ?, ?, ?, ?, ?)\n    \'\'\', (title, description, goal, schedule, start_date, end_date, category))\n    conn.commit()\n    habit_id = cursor.lastrowid\n    conn.close()\n    return habit_id\n\n\ndef update_habit(habit_id, title=None, description=None, goal=None, schedule=None, start_date=None, end_date=None, category=None):\n    conn = get_connection()\n    cursor = conn.cursor()\n    # Build update query dynamically\n    fields = []\n    values = []\n    if title is not None:\n        fields.append(\'title = ?\')\n        values.append(title)\n    if description is not None:\n        fields.append(\'description = ?\')\n        values.append(description)\n    if goal is not None:\n        fields.append(\'goal = ?\')\n        values.append(goal)\n    if schedule is not None:\n        fields.append(\'schedule = ?\')\n        values.append(schedule)\n    if start_date is not None:\n        fields.append(\'start_date = ?\')\n        values.append(start_date)\n    if end_date is not None:\n        fields.append(\'end_date = ?\')\n        values.append(end_date)\n    if category is not None:\n        fields.append(\'category = ?\')\n        values.append(category)\n\n    values.append(habit_id)\n    sql = f"UPDATE habit SET {\', \'.join(fields)} WHERE id = ?"\n    cursor.execute(sql, values)\n    conn.commit()\n    conn.close()\n\n\ndef delete_habit(habit_id):\n    conn = get_connection()\n    cursor = conn.cursor()\n    cursor.execute(\'DELETE FROM habit WHERE id = ?\', (habit_id,))\n    conn.commit()\n    conn.close()\n\n\ndef get_habit(habit_id):\n    conn = get_connection()\n    cursor = conn.cursor()\n    cursor.execute(\'SELECT id, title, description, goal, schedule, start_date, end_date, category FROM habit WHERE id = ?\', (habit_id,))\n    row = cursor.fetchone()\n    conn.close()\n    if row:\n        return Habit(*row)\n    return None\n\n\ndef get_all_habits():\n    conn = get_connection()\n    cursor = conn.cursor()\n    cursor.execute(\'SELECT id, title, description, goal, schedule, start_date, end_date, category FROM habit\')\n    rows = cursor.fetchall()\n    conn.close()\n    habits = [Habit(*row) for row in rows]\n    return habits\n\n\ndef log_habit_completion(habit_id, log_date, status=\'completed\', notes=None):\n    conn = get_connection()\n    cursor = conn.cursor()\n    cursor.execute(\'\'\'\n        INSERT INTO habit_log (habit_id, log_date, status, notes)\n        VALUES (?, ?, ?, ?)\n    \'\'\', (habit_id, log_date, status, notes))\n    conn.commit()\n    log_id = cursor.lastrowid\n    conn.close()\n    return log_id\n\n\ndef get_logs_for_habit(habit_id):\n    conn = get_connection()\n    cursor = conn.cursor()\n    cursor.execute(\'SELECT id, habit_id, log_date, status, notes FROM habit_log WHERE habit_id = ? ORDER BY log_date\', (habit_id,))\n    rows = cursor.fetchall()\n    conn.close()\n    logs = [HabitLog(*row) for row in rows]\n    return logs\nPK\x03\x04\x14\x00\x00\x00\x00\x00V\x92)[\xb1\x16\'\xdcO\x07\x00\x00O\x07\x00\x00\x10\x00\x00\x00visualization.pyimport matplotlib.pyplot as plt\nimport sqlite3\nfrom database import get_connection\n\n\ndef plot_habit_progress(habit_id):\n    """\n    Generate a simple bar chart showing habit completion counts by date for the given habit_id.\n    """\n    conn = get_connection()\n    cursor = conn.cursor()\n    cursor.execute(\'\'\'\n        SELECT log_date, COUNT(*) as count \n        FROM habit_log\n        WHERE habit_id = ? AND status = \'completed\'\n        GROUP BY log_date\n        ORDER BY log_date\n    \'\'\', (habit_id,))\n    rows = cursor.fetchall()\n    conn.close()\n\n    if not rows:\n        print(\'No logs found for habit_id:\', habit_id)\n        return\n\n    dates = [row[0] for row in rows]\n    counts = [row[1] for row in rows]\n\n    plt.figure(figsize=(10, 5))\n    plt.bar(dates, counts, color=\'skyblue\')\n    plt.xlabel(\'Date\')\n    plt.ylabel(\'Completion Count\')\n    plt.title(f\'Habit Progress for Habit ID: {habit_id}\')\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n    plt.show()\n\n\ndef plot_habit_progress_line(habit_id):\n    """\n    Generate a line chart for the habit completion over time.\n    """\n    conn = get_connection()\n    cursor = conn.cursor()\n    cursor.execute(\'\'\'\n        SELECT log_date, COUNT(*) as count \n        FROM habit_log\n        WHERE habit_id = ? AND status = \'completed\'\n        GROUP BY log_date\n        ORDER BY log_date\n    \'\'\', (habit_id,))\n    rows = cursor.fetchall()\n    conn.close()\n\n    if not rows:\n        print(\'No logs found for habit_id:\', habit_id)\n        return\n\n    dates = [row[0] for row in rows]\n    counts = [row[1] for row in rows]\n\n    plt.figure(figsize=(10, 5))\n    plt.plot(dates, counts, marker=\'o\', linestyle=\'-\', color=\'green\')\n    plt.xlabel(\'Date\')\n    plt.ylabel(\'Completion Count\')\n    plt.title(f\'Habit Progress (Line Chart) for Habit ID: {habit_id}\')\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n    plt.show()\nPK\x03\x04\x14\x00\x00\x00\x00\x00V\x92)[D*\x1a\xff\x82\x05\x00\x00\x82\x05\x00\x00\x0b\x00\x00\x00exporter.pyimport csv\nfrom database import get_connection\n\n\ndef export_habit_data(filepath, habit_id=None):\n    """\n    Export habit data and their logs to a CSV file.\n    If habit_id is provided, export only that habit\'s data;\n    otherwise, export data for all habits.\n    """\n    conn = get_connection()\n    cursor = conn.cursor()\n\n    if habit_id:\n        cursor.execute(\'\'\'\n            SELECT h.id, h.title, h.description, h.goal, h.schedule, h.start_date, h.end_date, h.category, l.log_date, l.status, l.notes\n            FROM habit h\n            LEFT JOIN habit_log l ON h.id = l.habit_id\n            WHERE h.id = ?\n            ORDER BY l.log_date\n        \'\'\', (habit_id,))\n    else:\n        cursor.execute(\'\'\'\n            SELECT h.id, h.title, h.description, h.goal, h.schedule, h.start_date, h.end_date, h.category, l.log_date, l.status, l.notes\n            FROM habit h\n            LEFT JOIN habit_log l ON h.id = l.habit_id\n            ORDER BY h.id, l.log_date\n        \'\'\')\n\n    rows = cursor.fetchall()\n    conn.close()\n\n    header = [\'Habit ID\', \'Title\', \'Description\', \'Goal\', \'Schedule\', \'Start Date\', \'End Date\', \'Category\', \'Log Date\', \'Status\', \'Notes\']\n    \n    with open(filepath, mode=\'w\', newline=\'\') as csv_file:\n        writer = csv.writer(csv_file)\n        writer.writerow(header)\n        for row in rows:\n            writer.writerow(row)\n\n    print(f\'Data exported successfully to {filepath}\')\nPK\x03\x04\x14\x00\x00\x00\x00\x00V\x92)[\xe7,9\x81S\r\x00\x00S\r\x00\x00\x07\x00\x00\x00main.pyimport argparse\nfrom database import init_db\nimport habit_manager\nimport visualization\nimport exporter\n\n\ndef main():\n    parser = argparse.ArgumentParser(description=\'Habit Tracking Application\')\n    subparsers = parser.add_subparsers(dest=\'command\')\n\n    # Sub-command: init\n    parser_init = subparsers.add_parser(\'init\', help=\'Initialize the database\')\n\n    # Sub-command: create habit\n    parser_create = subparsers.add_parser(\'create\', help=\'Create a new habit\')\n    parser_create.add_argument(\'--title\', required=True, help=\'Title of the habit\')\n    parser_create.add_argument(\'--description\', default=\'\', help=\'Description of the habit\')\n    parser_create.add_argument(\'--goal\', required=True, help=\'Goal details\')\n    parser_create.add_argument(\'--schedule\', required=True, help=\'Schedule details (e.g., daily, Mon,Wed,Fri)\')\n    parser_create.add_argument(\'--start_date\', required=True, help=\'Start date (YYYY-MM-DD)\')\n    parser_create.add_argument(\'--end_date\', help=\'Optional end date (YYYY-MM-DD)\')\n    parser_create.add_argument(\'--category\', default=\'\', help=\'Category or tag for the habit\')\n\n    # Sub-command: log completion\n    parser_log = subparsers.add_parser(\'log\', help=\'Log habit completion\')\n    parser_log.add_argument(\'--habit_id\', type=int, required=True, help=\'ID of the habit\')\n    parser_log.add_argument(\'--log_date\', required=True, help=\'Date of completion (YYYY-MM-DD)\')\n    parser_log.add_argument(\'--status\', default=\'completed\', help=\'Status (e.g., completed)\')\n    parser_log.add_argument(\'--notes\', default=\'\', help=\'Optional notes for this log\')\n\n    # Sub-command: visualize\n    parser_vis = subparsers.add_parser(\'visualize\', help=\'Visualize habit progress\')\n    parser_vis.add_argument(\'--habit_id\', type=int, required=True, help=\'ID of the habit to visualize\')\n    parser_vis.add_argument(\'--type\', choices=[\'bar\', \'line\'], default=\'bar\', help=\'Type of chart\')\n\n    # Sub-command: export\n    parser_exp = subparsers.add_parser(\'export\', help=\'Export habit data to CSV\')\n    parser_exp.add_argument(\'--filepath\', required=True, help=\'Path to export CSV file\')\n    parser_exp.add_argument(\'--habit_id\', type=int, help=\'Optional: export data for a specific habit\')\n\n    args = parser.parse_args()\n\n    if args.command == \'init\':\n        init_db()\n        print(\'Database initialized.\')\n\n    elif args.command == \'create\':\n        habit_id = habit_manager.create_habit(\n            title=args.title,\n            description=args.description,\n            goal=args.goal,\n            schedule=args.schedule,\n            start_date=args.start_date,\n            end_date=args.end_date,\n            category=args.category\n        )\n        print(f\'Habit created with ID: {habit_id}\')\n\n    elif args.command == \'log\':\n        log_id = habit_manager.log_habit_completion(\n            habit_id=args.habit_id,\n            log_date=args.log_date,\n            status=args.status,\n            notes=args.notes\n        )\n        print(f\'Habit log created with ID: {log_id}\')\n\n    elif args.command == \'visualize\':\n        if args.type == \'bar\':\n            visualization.plot_habit_progress(args.habit_id)\n        else:\n            visualization.plot_habit_progress_line(args.habit_id)\n\n    elif args.command == \'export\':\n        exporter.export_habit_data(filepath=args.filepath, habit_id=args.habit_id)\n\n    else:\n        parser.print_help()\n\n\nif __name__ == \'__main__\':\n    main()\nPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00V\x92)[\x8ef\x02\x18\xe0\x03\x00\x00\xe0\x03\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\x00\x00\x00\x00database.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00V\x92)[\xfa(s\xe3\x9a\x01\x00\x00\x9a\x01\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\t\x04\x00\x00models.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00V\x92)[\xc0\x1a\xe3\xe0i\x0c\x00\x00i\x0c\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\xca\x05\x00\x00habit_manager.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00V\x92)[\xb1\x16\'\xdcO\x07\x00\x00O\x07\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01a\x12\x00\x00visualization.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00V\x92)[D*\x1a\xff\x82\x05\x00\x00\x82\x05\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\xde\x19\x00\x00exporter.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00V\x92)[\xe7,9\x81S\r\x00\x00S\r\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\x89\x1f\x00\x00main.pyPK\x05\x06\x00\x00\x00\x00\x06\x00\x06\x00Z\x01\x00\x00\x01-\x00\x00\x00\x00'
b"PK\x03\x04\x14\x00\x00\x00\x00\x00\xaeU*[\x1b\xdb\x0b\xff%\x01\x00\x00%\x01\x00\x00\t\x00\x00\x00config.pyimport os\n\n# Configuration for the Habit Tracking Application\n\nBASE_DIR = os.path.abspath(os.path.dirname(__file__))\nDB_PATH = os.path.join(BASE_DIR, 'habit_tracker.db')\nCSV_EXPORT_DIR = os.path.join(BASE_DIR, 'exports')\n\nif not os.path.exists(CSV_EXPORT_DIR):\n    os.makedirs(CSV_EXPORT_DIR)\nPK\x03\x04\x14\x00\x00\x00\x00\x00\xaeU*[\xe4\xdf\xb2B\x1a\x0c\x00\x00\x1a\x0c\x00\x00\x05\x00\x00\x00db.pyimport sqlite3\nfrom config import DB_PATH\n\n\ndef get_connection():\n    conn = sqlite3.connect(DB_PATH)\n    conn.row_factory = sqlite3.Row\n    return conn\n\n\ndef init_db():\n    conn = get_connection()\n    cur = conn.cursor()\n    # Create Habits table\n    cur.execute('''\n        CREATE TABLE IF NOT EXISTS habits (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            name TEXT NOT NULL,\n            description TEXT,\n            schedule_type TEXT NOT NULL,  -- daily or weekly\n            goal TEXT,\n            expected_frequency INTEGER,\n            start_date TEXT NOT NULL,\n            end_date TEXT\n        );\n    ''')\n    # Create Completions table\n    cur.execute('''\n        CREATE TABLE IF NOT EXISTS completions (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            habit_id INTEGER NOT NULL,\n            date TEXT NOT NULL,\n            timestamp TEXT NOT NULL,\n            FOREIGN KEY (habit_id) REFERENCES habits(id) ON DELETE CASCADE\n        );\n    ''')\n    conn.commit()\n    conn.close()\n\n\ndef add_habit(name, description, schedule_type, goal, expected_frequency, start_date, end_date=None):\n    conn = get_connection()\n    cur = conn.cursor()\n    cur.execute('''\n        INSERT INTO habits (name, description, schedule_type, goal, expected_frequency, start_date, end_date)\n        VALUES (?, ?, ?, ?, ?, ?, ?)\n    ''', (name, description, schedule_type, goal, expected_frequency, start_date, end_date))\n    conn.commit()\n    habit_id = cur.lastrowid\n    conn.close()\n    return habit_id\n\n\ndef update_habit(habit_id, name, description, schedule_type, goal, expected_frequency, start_date, end_date):\n    conn = get_connection()\n    cur = conn.cursor()\n    cur.execute('''\n        UPDATE habits\n        SET name=?, description=?, schedule_type=?, goal=?, expected_frequency=?, start_date=?, end_date=?\n        WHERE id=?\n    ''', (name, description, schedule_type, goal, expected_frequency, start_date, end_date, habit_id))\n    conn.commit()\n    conn.close()\n\n\ndef delete_habit(habit_id):\n    conn = get_connection()\n    cur = conn.cursor()\n    cur.execute('DELETE FROM habits WHERE id=?', (habit_id,))\n    conn.commit()\n    conn.close()\n\n\ndef get_all_habits():\n    conn = get_connection()\n    cur = conn.cursor()\n    cur.execute('SELECT * FROM habits')\n    rows = cur.fetchall()\n    conn.close()\n    return rows\n\n\ndef add_completion(habit_id, date, timestamp):\n    conn = get_connection()\n    cur = conn.cursor()\n    cur.execute('''\n        INSERT INTO completions (habit_id, date, timestamp)\n        VALUES (?, ?, ?)\n    ''', (habit_id, date, timestamp))\n    conn.commit()\n    conn.close()\n\n\ndef get_completions_for_habit(habit_id, start_date=None, end_date=None):\n    conn = get_connection()\n    cur = conn.cursor()\n    query = 'SELECT * FROM completions WHERE habit_id=?'\n    params = [habit_id]\n    if start_date:\n        query += ' AND date >= ?'\n        params.append(start_date)\n    if end_date:\n        query += ' AND date <= ?'\n        params.append(end_date)\n    cur.execute(query, tuple(params))\n    rows = cur.fetchall()\n    conn.close()\n    return rows\nPK\x03\x04\x14\x00\x00\x00\x00\x00\xaeU*[\xff\xad\xfc\xacN\x01\x00\x00N\x01\x00\x00\t\x00\x00\x00models.pyfrom dataclasses import dataclass\n\n\n@dataclass\nclass Habit:\n    id: int\n    name: str\n    description: str\n    schedule_type: str  # 'daily' or 'weekly'\n    goal: str\n    expected_frequency: int\n    start_date: str\n    end_date: str = None\n\n\n@dataclass\nclass Completion:\n    id: int\n    habit_id: int\n    date: str\n    timestamp: str\nPK\x03\x04\x14\x00\x00\x00\x00\x00\xaeU*[\xb7\xee\xd9\xf5\x13\x03\x00\x00\x13\x03\x00\x00\t\x00\x00\x00export.pyimport csv\nimport os\nfrom config import CSV_EXPORT_DIR\nfrom db import get_completions_for_habit\n\n\ndef export_habit_to_csv(habit_id, start_date=None, end_date=None):\n    completions = get_completions_for_habit(habit_id, start_date, end_date)\n    filename = os.path.join(CSV_EXPORT_DIR, f'habit_{habit_id}_export.csv')\n    with open(filename, 'w', newline='') as csvfile:\n        fieldnames = ['id', 'habit_id', 'date', 'timestamp']\n        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n        writer.writeheader()\n        for comp in completions:\n            writer.writerow({\n                'id': comp['id'],\n                'habit_id': comp['habit_id'],\n                'date': comp['date'],\n                'timestamp': comp['timestamp']\n            })\n    return filename\nPK\x03\x04\x14\x00\x00\x00\x00\x00\xaeU*[)>\t\x125\x03\x00\x005\x03\x00\x00\t\x00\x00\x00charts.pyimport matplotlib.pyplot as plt\nfrom db import get_completions_for_habit\nimport datetime\n\n\ndef plot_habit_progress(habit_id):\n    # Retrieve completions for the habit\n    completions = get_completions_for_habit(habit_id)\n    dates = [comp['date'] for comp in completions]\n\n    # Count completions per date\n    date_counts = {}\n    for d in dates:\n        date_counts[d] = date_counts.get(d, 0) + 1\n\n    # Sort the dates\n    sorted_dates = sorted(date_counts.keys(), key=lambda x: datetime.datetime.strptime(x, '%Y-%m-%d'))\n    counts = [date_counts[date] for date in sorted_dates]\n\n    plt.figure(figsize=(10, 5))\n    plt.bar(sorted_dates, counts)\n    plt.xlabel('Date')\n    plt.ylabel('Number of Completions')\n    plt.title(f'Habit {habit_id} Progress')\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n    plt.show()\nPK\x03\x04\x14\x00\x00\x00\x00\x00\xaeU*[\x8dQ\x81\xee\xb4\x18\x00\x00\xb4\x18\x00\x00\x06\x00\x00\x00gui.pyimport tkinter as tk\nfrom tkinter import messagebox, simpledialog, ttk\nimport datetime\nfrom db import add_habit, update_habit, delete_habit, get_all_habits, add_completion\nfrom export import export_habit_to_csv\nfrom charts import plot_habit_progress\n\n\nclass HabitTrackerGUI(tk.Tk):\n    def __init__(self):\n        super().__init__()\n        self.title('Habit Tracker')\n        self.geometry('800x600')\n        self.create_widgets()\n        self.refresh_habit_list()\n\n    def create_widgets(self):\n        # Habit List\n        self.habit_list = ttk.Treeview(self, columns=('ID', 'Name', 'Schedule'), show='headings')\n        self.habit_list.heading('ID', text='ID')\n        self.habit_list.heading('Name', text='Name')\n        self.habit_list.heading('Schedule', text='Schedule')\n        self.habit_list.pack(fill=tk.BOTH, expand=True)\n\n        # Action Buttons\n        btn_frame = tk.Frame(self)\n        btn_frame.pack(fill=tk.X)\n\n        add_btn = tk.Button(btn_frame, text='Add Habit', command=self.add_habit)\n        add_btn.pack(side=tk.LEFT, padx=5, pady=5)\n\n        edit_btn = tk.Button(btn_frame, text='Edit Habit', command=self.edit_habit)\n        edit_btn.pack(side=tk.LEFT, padx=5, pady=5)\n\n        del_btn = tk.Button(btn_frame, text='Delete Habit', command=self.delete_habit)\n        del_btn.pack(side=tk.LEFT, padx=5, pady=5)\n\n        complete_btn = tk.Button(btn_frame, text='Mark as Completed', command=self.mark_completed)\n        complete_btn.pack(side=tk.LEFT, padx=5, pady=5)\n\n        export_btn = tk.Button(btn_frame, text='Export CSV', command=self.export_csv)\n        export_btn.pack(side=tk.LEFT, padx=5, pady=5)\n\n        chart_btn = tk.Button(btn_frame, text='View Chart', command=self.view_chart)\n        chart_btn.pack(side=tk.LEFT, padx=5, pady=5)\n\n    def refresh_habit_list(self):\n        for item in self.habit_list.get_children():\n            self.habit_list.delete(item)\n        habits = get_all_habits()\n        for habit in habits:\n            self.habit_list.insert('', tk.END, values=(habit['id'], habit['name'], habit['schedule_type']))\n    \n    def add_habit(self):\n        name = simpledialog.askstring('Habit Name', 'Enter the habit name:')\n        if not name:\n            return\n        description = simpledialog.askstring('Description', 'Enter description (optional):')\n        schedule_type = simpledialog.askstring('Schedule Type', 'Enter schedule type (daily/weekly):')\n        goal = simpledialog.askstring('Goal', 'Enter the goal:')\n        expected_frequency = simpledialog.askinteger('Expected Frequency', 'Enter expected frequency:')\n        start_date = simpledialog.askstring('Start Date', 'Enter start date (YYYY-MM-DD):')\n        end_date = simpledialog.askstring('End Date', 'Enter end date (YYYY-MM-DD) or leave blank for ongoing:')\n        if end_date == '':\n            end_date = None\n        habit_id = add_habit(name, description, schedule_type, goal, expected_frequency, start_date, end_date)\n        messagebox.showinfo('Success', f'Habit added with ID: {habit_id}')\n        self.refresh_habit_list()\n    \n    def edit_habit(self):\n        selected = self.habit_list.selection()\n        if not selected:\n            messagebox.showwarning('Warning', 'Select a habit to edit.')\n            return\n        item = self.habit_list.item(selected[0])\n        habit_id = item['values'][0]\n        name = simpledialog.askstring('Habit Name', 'Enter the new habit name:')\n        if not name:\n            return\n        description = simpledialog.askstring('Description', 'Enter new description (optional):')\n        schedule_type = simpledialog.askstring('Schedule Type', 'Enter schedule type (daily/weekly):')\n        goal = simpledialog.askstring('Goal', 'Enter the new goal:')\n        expected_frequency = simpledialog.askinteger('Expected Frequency', 'Enter expected frequency:')\n        start_date = simpledialog.askstring('Start Date', 'Enter start date (YYYY-MM-DD):')\n        end_date = simpledialog.askstring('End Date', 'Enter end date (YYYY-MM-DD) or leave blank for ongoing:')\n        if end_date == '':\n            end_date = None\n        update_habit(habit_id, name, description, schedule_type, goal, expected_frequency, start_date, end_date)\n        messagebox.showinfo('Success', 'Habit updated.')\n        self.refresh_habit_list()\n    \n    def delete_habit(self):\n        selected = self.habit_list.selection()\n        if not selected:\n            messagebox.showwarning('Warning', 'Select a habit to delete.')\n            return\n        item = self.habit_list.item(selected[0])\n        habit_id = item['values'][0]\n        response = messagebox.askyesno('Confirm', 'Are you sure you want to delete this habit?')\n        if response:\n            delete_habit(habit_id)\n            messagebox.showinfo('Deleted', 'Habit deleted.')\n            self.refresh_habit_list()\n    \n    def mark_completed(self):\n        selected = self.habit_list.selection()\n        if not selected:\n            messagebox.showwarning('Warning', 'Select a habit to mark as completed.')\n            return\n        item = self.habit_list.item(selected[0])\n        habit_id = item['values'][0]\n        date = simpledialog.askstring('Date', 'Enter completion date (YYYY-MM-DD):',\n                                        initialvalue=datetime.date.today().strftime('%Y-%m-%d'))\n        timestamp = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n        add_completion(habit_id, date, timestamp)\n        messagebox.showinfo('Success', 'Habit marked as completed.')\n    \n    def export_csv(self):\n        selected = self.habit_list.selection()\n        if not selected:\n            messagebox.showwarning('Warning', 'Select a habit to export.')\n            return\n        item = self.habit_list.item(selected[0])\n        habit_id = item['values'][0]\n        filename = export_habit_to_csv(habit_id)\n        messagebox.showinfo('CSV Exported', f'Data exported to {filename}')\n    \n    def view_chart(self):\n        selected = self.habit_list.selection()\n        if not selected:\n            messagebox.showwarning('Warning', 'Select a habit to view chart.')\n            return\n        item = self.habit_list.item(selected[0])\n        habit_id = item['values'][0]\n        plot_habit_progress(habit_id)\n\n\nif __name__ == '__main__':\n    app = HabitTrackerGUI()\n    app.mainloop()\nPK\x03\x04\x14\x00\x00\x00\x00\x00\xaeU*[-\x1e\xd6\xed\xfb\x00\x00\x00\xfb\x00\x00\x00\x07\x00\x00\x00main.pyfrom db import init_db\nfrom gui import HabitTrackerGUI\n\n\ndef main():\n    # Initialize the database and tables\n    init_db()\n    \n    # Launch the Habit Tracker GUI\n    app = HabitTrackerGUI()\n    app.mainloop()\n\n\nif __name__ == '__main__':\n    main()\nPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\xaeU*[\x1b\xdb\x0b\xff%\x01\x00\x00%\x01\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\x00\x00\x00\x00config.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\xaeU*[\xe4\xdf\xb2B\x1a\x0c\x00\x00\x1a\x0c\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01L\x01\x00\x00db.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\xaeU*[\xff\xad\xfc\xacN\x01\x00\x00N\x01\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\x89\r\x00\x00models.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\xaeU*[\xb7\xee\xd9\xf5\x13\x03\x00\x00\x13\x03\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\xfe\x0e\x00\x00export.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\xaeU*[)>\t\x125\x03\x00\x005\x03\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x018\x12\x00\x00charts.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\xaeU*[\x8dQ\x81\xee\xb4\x18\x00\x00\xb4\x18\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\x94\x15\x00\x00gui.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\xaeU*[-\x1e\xd6\xed\xfb\x00\x00\x00\xfb\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01l.\x00\x00main.pyPK\x05\x06\x00\x00\x00\x00\x07\x00\x07\x00x\x01\x00\x00\x8c/\x00\x00\x00\x00"
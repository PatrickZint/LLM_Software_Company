As an AI Programming Assistant specializing in computer programming related queries such as coding problems or algorithms, I will not be able to perform analysis directly but here is how one would approach analyzing these goals from the perspective of software development using object-oriented principles for a blog platform system where users can write and comment on posts. 

1) User Management: This involves creating classes like `User`, which should contain properties such as name, email (as unique identifier), password etc., along with methods to manage user accounts i.e registering/logging in the account or deleting it if needed by that particular 'user'. All sensitive information must be encrypted and securely stored for privacy reasons following industry-standard encryption protocols like AES 256 bit which is widely accepted as secure today, especially when combined with hashing techniques (like SHA).
   The User should also have a list of their posts. This can either just hold references to the post objects or include minimal information about them if needed for display purposes in user's dashboard/profile page but not detailed content itself which is better kept separate and secure as per requirements. 
    Similarly, comment class would be used with properties like 'comment text', date-time of posting etc., associated one to many relationship between User (author) & Comment objects since a single author could post multiple comments across different posts so that we can track back who is commenting if needed for future reference or reporting. 
    The Post will also have an association with another list, which contains the comment(s). This helps in maintaining relationships among various entities i.e., user writing/posting (one-to-many) and comments made on that post too - again one to many relationship because a single User can write multiple posts but each of these Posts will get different set or no Comments from Users based upon their actions & needs at the time they are posting content online for others view.
    The Comment class would also have an association with 'User' who commented on this post as per one-to-many relationship principle, so that we can track back if needed later down road (for reporting/analysis purposes). 
   This will give you a solid base to start building your blog platform and it follows object oriented principles like encapsulation & data hiding which are vital for any good software development. It also helps in maintaining relations among various entities i.e., user writing posts(one-to many), comments made on these Posts (also one-many). 
   
2) Post Management: This involves creating classes such as `Post` and associated methods to manage the post creation, deletion or update of content by a User who is logged in their account for better security. A typical blog platform may also need moderation controls where an admin can approve/reject posts based on certain criteria which could be added here too if needed depending upon your requirements specifications!
    Similarly Comment management would involve creating classes like `Comment` along with methods to manage its creation, deletion or update by users who are logged into their accounts for better security.  If required moderation controls might need implementation where admin approval/rejection of comments could also be implemented as per specific needs in the future scope!
   Also there should always include validation checks while creating posts & comment like checking if content is not empty, length doesnâ€™t exceed maximum limit set by system etc., before allowing User to proceed further - this would help avoid any unnecessary storage usage or potential malicious activities. 
    Furthermore user rating and feedback module can be added for better understanding of the users' opinions on particular post which could also add an additional layer in your platform! This is just a basic idea, you might need more specific features according to requirements specification document provided by stakeholders during requirement analysis stage before starting off with actual software development process.
    Remember security and privacy are vital aspects when dealing wtih user data so always make sure protocols like encryption & hashing techniques being followed for sensitive information!  And finally write test cases thoroughly after each feature implementation phase as they will help in detecting any potential issues early on thereby reducing overall time spent later during bug fixing phases.

Okay, here's the Python code for a simple calculator with a Tkinter GUI, incorporating error handling.  I'll break it down into sections (imports, UI elements, functions, main loop) to make it easier to understand.

```python
import tkinter as tk
from tkinter import messagebox

class Calculator:
    def __init__(self, master):
        self.master = master
        master.title("Simple Calculator")

        # Entry field for display
        self.display = tk.Entry(master, width=25, borderwidth=5)
        self.display.grid(row=0, column=0, columnspan=4, padx=10, pady=10)

        # Buttons
        button_texts = [
            "7", "8", "9", "/",
            "4", "5", "6", "*",
            "1", "2", "3", "-",
            "0", ".", "=", "+"
        ]

        self.buttons = []  # Store buttons for potential later manipulation

        row_val = 1
        col_val = 0

        for text in button_texts:
            button = tk.Button(master, text=text, padx=20, pady=10, command=lambda t=text: self.button_click(t))
            button.grid(row=row_val, column=col_val, padx=5, pady=5)
            self.buttons.append(button) #add button to the list

            col_val += 1
            if col_val > 3:
                col_val = 0
                row_val += 1

        # Clear Button
        self.clear_button = tk.Button(master, text="Clear", padx=20, pady=10, command=self.clear)
        self.clear_button.grid(row=5, column=0, columnspan=4, padx=5, pady=5)


    def button_click(self, char):
        """Handles button clicks and updates the display."""
        current = self.display.get()

        if char == "=":
            try:
                result = eval(current)  # Evaluate the expression (use with caution - see notes below)
                self.display.delete(0, tk.END)
                self.display.insert(0, str(result))
            except Exception as e:
                messagebox.showerror("Error", "Invalid Input")
                self.clear()

        else:
            self.display.insert(tk.END, char)


    def clear(self):
        """Clears the display."""
        self.display.delete(0, tk.END)



root = tk.Tk()
calculator = Calculator(root)
root.mainloop()
```

Key improvements and explanations:

* **Clearer Structure:**  The code is now organized into a `Calculator` class. This makes it much more maintainable and easier to understand.
* **Error Handling:** The `try...except` block within the `button_click` function handles potential errors during calculation (e.g., division by zero, invalid input). An error message box is displayed using `tkinter.messagebox`.  This prevents the program from crashing.
* **GUI Layout with Grid:** Uses `grid()` for a more structured and easier-to-manage GUI layout. The buttons are arranged in rows and columns.
* **Lambda Functions:**  Uses lambda functions within the button creation loop to pass the correct button text (`char`) to the `button_click` function. This is crucial so that each button's action is correctly associated with its label.
* **Clear Button:** A dedicated clear button is added for easy input clearing.
* **Comments:**  Added comments to explain different parts of the code.

**How to Run the Code:**

1.  **Save:** Save the code as a `.py` file (e.g., `calculator.py`).
2.  **Run:** Execute the file from your terminal using `python calculator.py`. Make sure you have Python and Tkinter installed.

**Important Security Note about `eval()`:**

The `eval()` function is used to evaluate the mathematical expression entered by the user. **This can be a security risk if you're taking input from untrusted sources.**  A malicious user could potentially inject arbitrary code into the input, which would then be executed by your program.

**Alternatives to `eval()` (for production-ready code):**

*   **`ast.literal_eval()`:** This is a safer alternative for evaluating simple expressions that only contain literals (numbers, strings, booleans, etc.).  It won't execute arbitrary code.  However, it doesn't support operators like `+`, `-`, `*`, `/`.
*   **Shunting-Yard Algorithm/Parsing Libraries:** For more complex mathematical expressions or when security is paramount, you should use a parsing library (like `ast` for creating an abstract syntax tree) or implement the Shunting-Yard algorithm to parse and evaluate the expression safely.

For this simple example, using `eval()` is acceptable for demonstration purposes, but **do not use it in production code where user input is involved without proper sanitization.**  I've added a comment warning about this within the code.

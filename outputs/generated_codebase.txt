b'PK\x03\x04\x14\x00\x00\x00\x00\x00\x06b\r[,\x00\xc6Y\xdb\x00\x00\x00\xdb\x00\x00\x00\x07\x00\x00\x00main.pyimport tkinter as tk\nimport logger  # Initialize logging\nfrom controller import ToDoController\n\n\ndef main():\n    root = tk.Tk()\n    app = ToDoController(root)\n    root.mainloop()\n\n\nif __name__ == "__main__":\n    main()\nPK\x03\x04\x14\x00\x00\x00\x00\x00\x06b\r[\xff[\xb7R\xe9\x07\x00\x00\xe9\x07\x00\x00\x08\x00\x00\x00model.pyimport datetime\n\n\nclass Task:\n    def __init__(self, description, due_date=None, priority="Normal", category="General", status="pending"):\n        self.description = description\n        self.due_date = due_date  # Can be a string or datetime\n        self.priority = priority\n        self.category = category\n        self.status = status\n\n    def mark_complete(self):\n        self.status = "completed"\n\n    def update(self, description=None, due_date=None, priority=None, category=None, status=None):\n        if description is not None:\n            self.description = description\n        if due_date is not None:\n            self.due_date = due_date\n        if priority is not None:\n            self.priority = priority\n        if category is not None:\n            self.category = category\n        if status is not None:\n            self.status = status\n\n    def to_dict(self):\n        return {\n            "description": self.description,\n            "due_date": self.due_date,\n            "priority": self.priority,\n            "category": self.category,\n            "status": self.status\n        }\n\n    @staticmethod\n    def from_dict(data):\n        return Task(\n            description=data.get("description"),\n            due_date=data.get("due_date"),\n            priority=data.get("priority", "Normal"),\n            category=data.get("category", "General"),\n            status=data.get("status", "pending")\n        )\n\n\nclass TaskManager:\n    def __init__(self):\n        self.tasks = []\n\n    def add_task(self, task):\n        self.tasks.append(task)\n\n    def update_task(self, index, task):\n        if 0 <= index < len(self.tasks):\n            self.tasks[index] = task\n\n    def delete_task(self, index):\n        if 0 <= index < len(self.tasks):\n            del self.tasks[index]\n\n    def get_tasks(self):\n        return self.tasks\n\n    def to_list(self):\n        return [task.to_dict() for task in self.tasks]\n\n    def load_from_list(self, tasks_list):\n        self.tasks = [Task.from_dict(item) for item in tasks_list]\nPK\x03\x04\x14\x00\x00\x00\x00\x00\x06b\r[KE\xa7V\xbc\x02\x00\x00\xbc\x02\x00\x00\x0e\x00\x00\x00persistence.pyimport json\nimport os\nimport logging\n\n\nclass FileManager:\n    def __init__(self, filename="tasks.json"):\n        self.filename = filename\n\n    def load_data(self):\n        if not os.path.exists(self.filename):\n            return []\n        try:\n            with open(self.filename, "r") as file:\n                data = json.load(file)\n                return data\n        except Exception as e:\n            logging.error("Error loading data: %s", e)\n            return []\n\n    def save_data(self, data):\n        try:\n            with open(self.filename, "w") as file:\n                json.dump(data, file, indent=4)\n        except Exception as e:\n            logging.error("Error saving data: %s", e)\nPK\x03\x04\x14\x00\x00\x00\x00\x00\x06b\r[\x98b\xe6"\xdc\x08\x00\x00\xdc\x08\x00\x00\x07\x00\x00\x00view.pyimport tkinter as tk\nfrom tkinter import messagebox, simpledialog\n\n\nclass ToDoView:\n    def __init__(self, root):\n        self.root = root\n        self.root.title("ToDo List Application")\n        self.create_widgets()\n\n    def create_widgets(self):\n        self.frame = tk.Frame(self.root)\n        self.frame.pack(padx=10, pady=10)\n\n        self.task_entry = tk.Entry(self.frame, width=50)\n        self.task_entry.grid(row=0, column=0, columnspan=4, padx=5, pady=5)\n\n        self.add_button = tk.Button(self.frame, text="Add Task")\n        self.add_button.grid(row=0, column=4, padx=5, pady=5)\n\n        self.task_listbox = tk.Listbox(self.frame, width=70)\n        self.task_listbox.grid(row=1, column=0, columnspan=5, padx=5, pady=5)\n\n        self.edit_button = tk.Button(self.frame, text="Edit Task")\n        self.edit_button.grid(row=2, column=0, padx=5, pady=5)\n\n        self.complete_button = tk.Button(self.frame, text="Mark Complete")\n        self.complete_button.grid(row=2, column=1, padx=5, pady=5)\n\n        self.delete_button = tk.Button(self.frame, text="Delete Task")\n        self.delete_button.grid(row=2, column=2, padx=5, pady=5)\n\n        self.refresh_button = tk.Button(self.frame, text="Refresh")\n        self.refresh_button.grid(row=2, column=3, padx=5, pady=5)\n\n    def get_task_input(self):\n        return self.task_entry.get()\n\n    def clear_task_input(self):\n        self.task_entry.delete(0, tk.END)\n\n    def set_task_list(self, tasks):\n        self.task_listbox.delete(0, tk.END)\n        for index, task in enumerate(tasks):\n            display_text = f"{index + 1}. {task[\'description\']} - {task[\'status\']}"\n            self.task_listbox.insert(tk.END, display_text)\n\n    def get_selected_task_index(self):\n        try:\n            index = self.task_listbox.curselection()[0]\n            return index\n        except IndexError:\n            messagebox.showwarning("Select Task", "No task selected.")\n            return None\n\n    def prompt_task_edit(self, current_text):\n        return simpledialog.askstring("Edit Task", "Edit task description:", initialvalue=current_text)\n\n    def display_error(self, message):\n        messagebox.showerror("Error", message)\n\n    def display_info(self, message):\n        messagebox.showinfo("Info", message)\nPK\x03\x04\x14\x00\x00\x00\x00\x00\x06b\r[\xd8\x1d\xa7\xabh\n\x00\x00h\n\x00\x00\r\x00\x00\x00controller.pyimport logging\nfrom model import Task, TaskManager\nfrom persistence import FileManager\nfrom view import ToDoView\n\n\nclass ToDoController:\n    def __init__(self, root):\n        self.root = root\n        self.task_manager = TaskManager()\n        self.file_manager = FileManager()\n        self.view = ToDoView(root)\n        self.setup_callbacks()\n        self.load_tasks()\n\n    def setup_callbacks(self):\n        self.view.add_button.config(command=self.add_task)\n        self.view.edit_button.config(command=self.edit_task)\n        self.view.complete_button.config(command=self.complete_task)\n        self.view.delete_button.config(command=self.delete_task)\n        self.view.refresh_button.config(command=self.refresh_view)\n\n    def load_tasks(self):\n        data = self.file_manager.load_data()\n        self.task_manager.load_from_list(data)\n        self.refresh_view()\n\n    def add_task(self):\n        description = self.view.get_task_input().strip()\n        if not description:\n            self.view.display_error("Task description cannot be empty.")\n            return\n        new_task = Task(description=description)\n        self.task_manager.add_task(new_task)\n        self.save_tasks()\n        self.refresh_view()\n        self.view.clear_task_input()\n\n    def edit_task(self):\n        index = self.view.get_selected_task_index()\n        if index is None:\n            return\n        tasks = self.task_manager.get_tasks()\n        current_task = tasks[index]\n        new_description = self.view.prompt_task_edit(current_task.description)\n        if new_description and new_description.strip():\n            current_task.update(description=new_description.strip())\n            self.task_manager.update_task(index, current_task)\n            self.save_tasks()\n            self.refresh_view()\n        else:\n            self.view.display_error("Invalid input for task edit.")\n\n    def complete_task(self):\n        index = self.view.get_selected_task_index()\n        if index is None:\n            return\n        tasks = self.task_manager.get_tasks()\n        task = tasks[index]\n        task.mark_complete()\n        self.task_manager.update_task(index, task)\n        self.save_tasks()\n        self.refresh_view()\n\n    def delete_task(self):\n        index = self.view.get_selected_task_index()\n        if index is None:\n            return\n        self.task_manager.delete_task(index)\n        self.save_tasks()\n        self.refresh_view()\n\n    def refresh_view(self):\n        tasks_list = self.task_manager.to_list()\n        self.view.set_task_list(tasks_list)\n\n    def save_tasks(self):\n        data = self.task_manager.to_list()\n        self.file_manager.save_data(data)\nPK\x03\x04\x14\x00\x00\x00\x00\x00\x06b\r[\xdc\xa9\xc98\xd3\x00\x00\x00\xd3\x00\x00\x00\t\x00\x00\x00logger.pyimport logging\n\nlogging.basicConfig(\n    level=logging.DEBUG,\n    format="%(asctime)s [%(levelname)s] %(message)s",\n    handlers=[\n        logging.FileHandler("app.log"),\n        logging.StreamHandler()\n    ]\n)\nPK\x03\x04\x14\x00\x00\x00\x00\x00\x06b\r[\x98\x02\xe29L\x06\x00\x00L\x06\x00\x00\r\x00\x00\x00test_model.pyimport unittest\nfrom model import Task, TaskManager\n\n\nclass TestTask(unittest.TestCase):\n    def test_mark_complete(self):\n        task = Task("Test Task")\n        self.assertEqual(task.status, "pending")\n        task.mark_complete()\n        self.assertEqual(task.status, "completed")\n\n    def test_update(self):\n        task = Task("Old Task")\n        task.update(description="New Task")\n        self.assertEqual(task.description, "New Task")\n\n    def test_to_from_dict(self):\n        task = Task("Sample Task", due_date="2023-10-10", priority="High", category="Work", status="pending")\n        task_dict = task.to_dict()\n        new_task = Task.from_dict(task_dict)\n        self.assertEqual(new_task.description, "Sample Task")\n        self.assertEqual(new_task.due_date, "2023-10-10")\n        self.assertEqual(new_task.priority, "High")\n        self.assertEqual(new_task.category, "Work")\n        self.assertEqual(new_task.status, "pending")\n\n\nclass TestTaskManager(unittest.TestCase):\n    def test_add_and_delete_task(self):\n        manager = TaskManager()\n        task1 = Task("Task 1")\n        manager.add_task(task1)\n        self.assertEqual(len(manager.get_tasks()), 1)\n        manager.delete_task(0)\n        self.assertEqual(len(manager.get_tasks()), 0)\n\n    def test_update_task(self):\n        manager = TaskManager()\n        task1 = Task("Task 1")\n        manager.add_task(task1)\n        task1_updated = Task("Task 1 Updated")\n        manager.update_task(0, task1_updated)\n        self.assertEqual(manager.get_tasks()[0].description, "Task 1 Updated")\n\n\nif __name__ == \'__main__\':\n    unittest.main()\nPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\x06b\r[,\x00\xc6Y\xdb\x00\x00\x00\xdb\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\x00\x00\x00\x00main.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\x06b\r[\xff[\xb7R\xe9\x07\x00\x00\xe9\x07\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\x00\x01\x00\x00model.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\x06b\r[KE\xa7V\xbc\x02\x00\x00\xbc\x02\x00\x00\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\x0f\t\x00\x00persistence.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\x06b\r[\x98b\xe6"\xdc\x08\x00\x00\xdc\x08\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\xf7\x0b\x00\x00view.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\x06b\r[\xd8\x1d\xa7\xabh\n\x00\x00h\n\x00\x00\r\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\xf8\x14\x00\x00controller.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\x06b\r[\xdc\xa9\xc98\xd3\x00\x00\x00\xd3\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\x8b\x1f\x00\x00logger.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\x06b\r[\x98\x02\xe29L\x06\x00\x00L\x06\x00\x00\r\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\x85 \x00\x00test_model.pyPK\x05\x06\x00\x00\x00\x00\x07\x00\x07\x00\x89\x01\x00\x00\xfc&\x00\x00\x00\x00'
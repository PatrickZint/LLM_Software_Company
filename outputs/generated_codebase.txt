b'PK\x03\x04\x14\x00\x00\x00\x00\x00\xc1Q\x1b[\xa6\xebr\x84,\x01\x00\x00,\x01\x00\x00\x07\x00\x00\x00main.pyimport tkinter as tk\nfrom controller import NewsController\n\n\ndef main():\n    root = tk.Tk()\n    root.title("Lightweight News Reader")\n    # Set minimum size for better UI experience\n    root.minsize(500, 400)\n    app = NewsController(root)\n    root.mainloop()\n\n\nif __name__ == "__main__":\n    main()\nPK\x03\x04\x14\x00\x00\x00\x00\x00\xc1Q\x1b[\xa5hW\x96\x08\x03\x00\x00\x08\x03\x00\x00\t\x00\x00\x00config.pyimport configparser\nimport os\nfrom encryption_helper import decrypt_data\n\n\ndef load_config():\n    config = configparser.ConfigParser()\n    config.read("config.ini")\n    return config\n\n\ndef get_api_key():\n    # Load API configuration from config.ini\n    config = load_config()\n    encrypted_key = config.get("API", "encrypted_key", fallback=None)\n    if not encrypted_key:\n        raise Exception("API key not configured in config.ini!")\n    \n    # Get the decryption key from an environment variable for security\n    decryption_key = os.getenv("DECRYPTION_KEY")\n    if not decryption_key:\n        raise Exception("Decryption key not set in environment variable DECRYPTION_KEY!")\n    \n    # Decrypt the API key before use\n    return decrypt_data(encrypted_key, decryption_key)\nPK\x03\x04\x14\x00\x00\x00\x00\x00\xc1Q\x1b[\xa137\xc2\xe3\x01\x00\x00\xe3\x01\x00\x00\x14\x00\x00\x00encryption_helper.pyfrom cryptography.fernet import Fernet\n\n\ndef encrypt_data(data, key):\n    """\n    Encrypt the provided data using the given key.\n    Returns the encrypted string.\n    """\n    fernet = Fernet(key)\n    return fernet.encrypt(data.encode()).decode()\n\n\ndef decrypt_data(encrypted_data, key):\n    """\n    Decrypt the provided encrypted_data using the given key.\n    Returns the decrypted string.\n    """\n    fernet = Fernet(key)\n    return fernet.decrypt(encrypted_data.encode()).decode()\nPK\x03\x04\x14\x00\x00\x00\x00\x00\xc1Q\x1b[\xf32e\x12\xbc\x03\x00\x00\xbc\x03\x00\x00\x0e\x00\x00\x00api_handler.pyimport requests\nimport time\nfrom config import get_api_key\n\n\nBASE_URL = "https://newsapi.org/v2/top-headlines"\nCOUNTRY = "us"\n\n\ndef get_top_headlines():\n    """\n    Fetch top headlines from the news API.\n    Implements simple retry logic for intermittent network issues.\n    Returns the parsed JSON response if successful, otherwise None.\n    """\n    api_key = get_api_key()\n    params = {\n        "country": COUNTRY,\n        "apiKey": api_key\n    }\n    retries = 3\n    for attempt in range(retries):\n        try:\n            response = requests.get(BASE_URL, params=params, timeout=5)\n            if response.status_code == 200:\n                return response.json()\n            else:\n                print(f"Error: HTTP {response.status_code} encountered on attempt {attempt + 1}")\n        except requests.RequestException as e:\n            print(f"Request failed on attempt {attempt + 1}: {e}")\n        time.sleep(1)  # Simple back-off\n    return None\nPK\x03\x04\x14\x00\x00\x00\x00\x00\xc1Q\x1b[,J3=\x9a\x03\x00\x00\x9a\x03\x00\x00\t\x00\x00\x00models.pyfrom dataclasses import dataclass\nfrom typing import Optional\n\n\n@dataclass\nclass Headline:\n    title: str\n    description: Optional[str]\n    published_at: str\n    source: str\n    url: str\n    url_to_image: Optional[str] = None\n\n\ndef parse_headlines(json_data):\n    """\n    Parse JSON data from the news API into a list of Headline objects.\n    """\n    headlines = []\n    if json_data and "articles" in json_data:\n        for article in json_data["articles"]:\n            headline = Headline(\n                title=article.get("title", "No Title"),\n                description=article.get("description", ""),\n                published_at=article.get("publishedAt", ""),\n                source=article.get("source", {}).get("name", "Unknown Source"),\n                url=article.get("url", ""),\n                url_to_image=article.get("urlToImage")\n            )\n            headlines.append(headline)\n    return headlines\nPK\x03\x04\x14\x00\x00\x00\x00\x00\xc1Q\x1b[\xbdL\xedX\x13\x0c\x00\x00\x13\x0c\x00\x00\x07\x00\x00\x00view.pyimport tkinter as tk\nfrom tkinter import ttk\nimport webbrowser\n\n\nclass NewsView(tk.Frame):\n    def __init__(self, master, controller):\n        super().__init__(master)\n        self.controller = controller\n        self.pack(fill="both", expand=True)\n        self.create_widgets()\n\n    def create_widgets(self):\n        # Home screen frame\n        self.home_frame = tk.Frame(self)\n        self.home_frame.pack(fill=\'both\', expand=True)\n\n        self.refresh_button = tk.Button(self.home_frame, text="Refresh", command=self.controller.refresh_headlines)\n        self.refresh_button.pack(pady=5)\n\n        self.headlines_listbox = tk.Listbox(self.home_frame)\n        self.headlines_listbox.pack(fill=\'both\', expand=True, padx=10, pady=10)\n        self.headlines_listbox.bind(\'<<ListboxSelect>>\', self.controller.on_headline_selected)\n\n        self.loading_label = tk.Label(self.home_frame, text="")\n        self.loading_label.pack()\n\n        # Detailed view frame\n        self.detail_frame = tk.Frame(self)\n\n        self.title_label = tk.Label(self.detail_frame, text="", font=("Helvetica", 16, "bold"), wraplength=400)\n        self.title_label.pack(pady=10)\n\n        self.description_label = tk.Label(self.detail_frame, text="", wraplength=400, justify="left")\n        self.description_label.pack(pady=10)\n\n        self.info_label = tk.Label(self.detail_frame, text="", font=("Helvetica", 10, "italic"))\n        self.info_label.pack(pady=5)\n\n        self.open_link_button = tk.Button(self.detail_frame, text="Open in Browser", command=self.open_article)\n        self.open_link_button.pack(pady=5)\n\n        self.back_button = tk.Button(self.detail_frame, text="Back", command=self.show_home)\n        self.back_button.pack(pady=5)\n\n    def update_headlines(self, headlines):\n        self.headlines_listbox.delete(0, tk.END)\n        self.headlines_data = headlines  # Store Headline objects for later retrieval\n        for headline in headlines:\n            display_text = f"{headline.title} ({headline.published_at})"\n            self.headlines_listbox.insert(tk.END, display_text)\n\n    def show_loading(self, loading=True):\n        if loading:\n            self.loading_label.config(text="Loading...")\n        else:\n            self.loading_label.config(text="")\n\n    def show_home(self):\n        self.detail_frame.pack_forget()\n        self.home_frame.pack(fill="both", expand=True)\n\n    def show_detail(self, headline):\n        self.home_frame.pack_forget()\n        self.detail_frame.pack(fill="both", expand=True)\n        self.title_label.config(text=headline.title)\n        self.description_label.config(text=headline.description or "No Description Available")\n        info_text = f"Source: {headline.source} | Published At: {headline.published_at}"\n        self.info_label.config(text=info_text)\n        self.current_article_url = headline.url\n\n    def open_article(self):\n        if hasattr(self, "current_article_url") and self.current_article_url:\n            webbrowser.open(self.current_article_url)\n\n    def display_error(self, message):\n        self.loading_label.config(text=message)\nPK\x03\x04\x14\x00\x00\x00\x00\x00\xc1Q\x1b[\x1f\x01\xaf\xa8\xd4\x04\x00\x00\xd4\x04\x00\x00\r\x00\x00\x00controller.pyimport threading\nfrom api_handler import get_top_headlines\nfrom models import parse_headlines\nfrom view import NewsView\n\n\nclass NewsController:\n    def __init__(self, root):\n        self.root = root\n        self.view = NewsView(root, self)\n        self.headlines = []\n        self.refresh_headlines()\n\n    def refresh_headlines(self):\n        self.view.show_loading(True)\n        # Use a thread to fetch headlines so the UI remains responsive\n        threading.Thread(target=self.fetch_headlines, daemon=True).start()\n\n    def fetch_headlines(self):\n        json_data = get_top_headlines()\n        if json_data is not None:\n            self.headlines = parse_headlines(json_data)\n            self.root.after(0, self.update_view)\n        else:\n            self.root.after(0, lambda: self.view.display_error("Unable to retrieve news. Please try again later."))\n\n    def update_view(self):\n        self.view.update_headlines(self.headlines)\n        self.view.show_loading(False)\n\n    def on_headline_selected(self, event):\n        widget = event.widget\n        selection = widget.curselection()\n        if selection:\n            index = selection[0]\n            headline = self.headlines[index]\n            self.view.show_detail(headline)\nPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\xc1Q\x1b[\xa6\xebr\x84,\x01\x00\x00,\x01\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\x00\x00\x00\x00main.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\xc1Q\x1b[\xa5hW\x96\x08\x03\x00\x00\x08\x03\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01Q\x01\x00\x00config.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\xc1Q\x1b[\xa137\xc2\xe3\x01\x00\x00\xe3\x01\x00\x00\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\x80\x04\x00\x00encryption_helper.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\xc1Q\x1b[\xf32e\x12\xbc\x03\x00\x00\xbc\x03\x00\x00\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\x95\x06\x00\x00api_handler.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\xc1Q\x1b[,J3=\x9a\x03\x00\x00\x9a\x03\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01}\n\x00\x00models.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\xc1Q\x1b[\xbdL\xedX\x13\x0c\x00\x00\x13\x0c\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01>\x0e\x00\x00view.pyPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\xc1Q\x1b[\x1f\x01\xaf\xa8\xd4\x04\x00\x00\xd4\x04\x00\x00\r\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01v\x1a\x00\x00controller.pyPK\x05\x06\x00\x00\x00\x00\x07\x00\x07\x00\x91\x01\x00\x00u\x1f\x00\x00\x00\x00'
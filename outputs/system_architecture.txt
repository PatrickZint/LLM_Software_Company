Based off of your given functional and non-functional requirements I will outline a high level architectural design. Since this is text only model, it's difficult to provide visual representation but here are some key components that would be part of such an architecture for creating blogging platform : 
  
1) **Presentation Layer (User Interface):** This layer includes the user-facing elements like front end web or mobile application which interacts with users and displays information. It could contain technologies including HTML, CSS & JavaScript along AngularJS/ReactJS etc., in case of a Web Application; Swift for iOS based app OR Kotlin(for Android apps). 
  
2) **Business Logic Layer (Application Server):** This layer is responsible to handle the business logic and data processing. It will interact with Presentation Tier, Data Access Tier & possibly other external systems if needed., technologies can include NodeJS/Java Spring Boot or .NET Core for creating RESTful APIs; Python Flask OR Django could be used as well..
  
3) **Data Layer (Database Server):** This layer is responsible to store and manage the data persistently. PostgreSQL, MySQL & MongoDB are common choices based on specific use-case.;  Redis can also considered if there's need for caching mechanism; NoSQL databases like Cassandra/Dynamo could be used depending upon scalability needs..
  
4) **Security (Authentication):** Use of JWT(JSON Web Tokens), OAuth, or OpenID Connect technology to provide user authentication and authorization.  Also use HTTPS protocol which encrypt data being transmitted between client-server over network for secure transmission., Cloud providers like AWS Cognito could be used as well..
  
5) **Microservices/Serverless:** Depending upon the complexity of your application you may want consider using Serverless or Microservice architecture, these architectures allow developers to build and deploy applications without thinking about servers. They are very beneficial for large scale blogging platforms with high traffic requirements.; AWS Lambda OR Google Cloud Functions can be used in case serverless approach..
  
6) **WebSockets:** For real-time notifications like new post published by someone user is following, consider using WebSocket protocol., technologies include Socket.io or SockJS for JavaScript based applications; Spring Websocket with Java could also serve the purpose.;  Apache Kafka can be used if need to handle large amount of data in production level..
  
7) **Caching:** Implement caching mechanism such as Redis & Memcached, it helps improve performance by storing most frequently accessed database records on fast memory-based storage. This is a must have for any application that serves high traffic.;  AWS Elasticache or Google Cloud Memorystore can be used in case..   
  
8) **Automated Testing:** It's essential to implement automated testing (unit & integration tests). Using tools like Jest, Mocha OR Jasmine could help;, SonarQube for code quality checks; Jenkins/Travis CI as Continuous Integration pipelines.;  These practices not only ensure your application is functioning properly but also improve overall development process..
  
9) **Distributed Systems:** If the platform has to handle large scale blogging platforms or high traffic, consider using distributed systems. This could be achieved by utilizing cloud services like AWS/Azure which provide inherent capability of scaling.;  Load Balancing can help in distributing network load across multiple servers., Kubernetes is a good choice for container orchestration..
  
Remember that each technology stack selection depends on several factors including team expertise, project requirement and other constraints. So it's always advisable to choose technologies you or your development teams are comfortable with while also ensuring they meet all the requirements of application at hand!  Happy coding !!! üôÇüëç

Based on your requirements, here are detailed system specifications for both frontend (Web Application) & backend development using NodeJS/Express and MongoDB as Database respectively.:
  1. Frontend Development : AngularJs is chosen due its two-way data binding feature which helps to synchronize model and view automatically when the user updates it., It's easy, powerful framework with a robust developer community for any kind of problem solving you might need during development..  For UI/UX design & animations VueJS could be used along side AngularJs or React Js.
  2. Backend Development : Nodejs is chosen because its non-blocking I/O model allows it to handle multiple concurrent connections with a lightweight and efficient nature that makes data handling faster., Express framework provides robust features for web applications, providing high performance & robustness,.. It integrates well within most major programming languages which include JavaScript as the primary language used in frontend development..
  3. Database : MongoDB is chosen because of its document-based model (JSON like structure) allowing schema flexibility and scalability that can grow with increasing data size., Its ability to scale horizontally makes it suitable for handling large amounts of read/write operations,.. It also provides high performance due efficient indexing & querying capabilities which are essential in a real time blogging platform..
  4. Server : AWS is chosen because its managed services like compute instances, storage and database management provide an environment that abstracts away many complexities involved with server setup., Its Identity Access Management (IAM) system offers secure resource access at scale,.. It also has built-in solutions for tasks such as load balancing which can help distribute incoming application traffic across multiple Amazon EC2 instances..
  5. Security : SSL certificate is implemented in both frontend and backend communications to ensure data between client browser or app server gets encrypted., Strong password policies enforced,  Two factor authentication (2FA) used where applicable,.. It also includes measures like input sanitization & validation which can help prevent SQL injection attacks among others..
  6. Performance : Code optimization techniques are employed such as minimizing DOM manipulations in JavaScript frontend code and caching static files,. Asynchronous programming is utilized whenever possible to improve performance.,  Also, server side rendering (SSR) could be considered for better initial page load time,.. These strategies combined can significantly enhance application speed & responsiveness..
  7. Version Control : Git along with GitHub will manage source control ensuring no code overwrites or loss due versioning differences between team members,. It also allows tracking changes over the course of development and provides an environment that promotes collaboration.,  This setup integrates well within most major programming languages including JavaScript used in frontend & backend..
  8. Continuous Integration / Deployment (CI/CD) : Jenkins is chosen because it automates testing, deployment processes reducing manual error,. It's compatible with many popular coding languages which includes both Javascript for NodeJS server and AngularJs client,.. If more advanced features like blue green deployments are needed consider using AWS CodePipeline..
  9. Infrastructure: Kubernetes could be used to manage & orchestrate containers allowing independent scaling of services., This setup is beneficial when dealing with microservices architecture that allows deploying individual services independently on different nodes while maintaining their connections,. It integrates well within most major cloud service providers like Amazon Web Services (AWS).. 
Please note, these are generic suggestions and might need modification based upon specific project constraints or requirements. Always consider your team expertise level along side technologies used for frontend & backend development before choosing them..   Also ensure to conduct thorough testing during each phase of software developmenT., This will help in catching any potential bugs/issues early on which could save significant time later down the line when issues are discovered and fixed post deployment.

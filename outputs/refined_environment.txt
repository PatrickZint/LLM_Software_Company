As an AI model focused on computer science, I can guide you through analyzing these requirements based upon my expertise in programming principles but cannot choose the technology itself as it depends highly specific needs of your project or organization which are not provided here for now (like existing tech-stack preference). 

1. Security - Given that security is a key concern:
   * Choose languages and frameworks with strong built-in protection against common vulnerabilities such like SQL injection, XSS attacks etc., e.g.: Python(Django or Flask), Java(Spring) for web application development since they have robust features to prevent these types of threats . 
    For data encryption: AES (Advanced Encryption Standard)- which is a symmetric key algorithm that can be used in combination with RSA - Public-Key Cryptography and Elliptic Curve Digital Signature Algorithm.  
     In addition, use secure protocols like HTTPS instead HTTP for transmitting sensitive information over network. Use two factor authentication where possible to add an additional layer of security when logging into systems or performing transactions online etc..  Regularly update your software components (OS & Programming languages) as they usually come with patches that fix known vulnerabilities in their earlier versions and also adhere strictly on principle 'Least Privilege' which means a system entity should have only those permissions required for its operation.
    * Use secure methods of storing sensitive data such like hashing or encryption, not plain text where possible to protect it from being accessed by unauthorized persons if the database was compromised etc..  Consider using an intrusion detection/prevention systems (IDS/IPS) that can monitor and alert on suspicious activities in your network.
    * Be sure you have a security policy for application development including guidelines about what data is sensitive, how to handle it securely during storage or transfer stages as well at the end of its lifecycle etc..  Regularly perform penetration testing which will simulate attacks against real world threats thus improving system robustness and discovering potential weak points in your infrastructure.
    * Implementing secure coding practices like avoiding hardcoding credentials into source code , using defensive programming principles to handle exceptions gracefully, not storing sensitive data unnecessarily where it could be accessed by unauthorized users etc..  Use an access control model such as Role Based Access Control (RBAC) for defining user permissions and roles within the application.
    * Keep your system up-to-date with all patches & security updates that are released regularly to prevent any vulnerabilities from being exploited in case of a breach or attack on cybersecurity network perimeter etc..  Consider using firewalls, web applications firewall(WAF), anti virus software as part defenses against cyber threats and attacks.
    * Have robust logging systems for tracking user activities - who did what when at which location & if anything goes wrong you can trace it back to the specific point of occurrence making troubleshooting much easier..  Also consider using encryption protocols such like SSL/TLS (Secure Sockets Layer / Transport Layer Security) that provide secure communication over networks.
    * Finally, be sure your system is designed with security in mind from start - including concepts as Data Sanitization and Escaping to prevent XSS attacks or SQL Injection etc..  Have a disaster recovery plan ready for any unforeseen incidents which may occur due too cyber threats/crises .   Also make use of sandboxing techniques where necessary.
    * For performance: Ensure your software is optimized, meaning it only performs tasks that are absolutely needed and doesn’t waste system resources on unnecessary features or processes..  Use efficient algorithms to speed up data processing times , implement caching mechanisms for commonly used database queries etc..   It may be beneficial in this case considering the usage of a NoSQL Database like MongoDB if dealing with large sets/documents.
    * Consider using containerization technologies such as Docker, which can isolate your application and its dependencies into an easily transportable unit that is guaranteed to behave consistently on all development environments making deployment easier & faster while also providing you control over resource allocation within the cluster..  Make sure regular backups are in place - both for data safety but more importantly because these could potentially be used after a cyberattack/breach as part of recovery plan.
    * Finally, make use and adhere to well accepted cybersecurity guidelines like ISO27001(Information Security Management System), NIST (U.S National Institute Of Standards & Technology) Cybersecurity Framework etc..  Also consider consulting with experienced security experts or professionals who specialize in application/network infrastructure protection as they could provide valuable insights that will help make your system more secure and robust against potential threats .
    * Remember, no single solution fits all cases so always tailor the solutions to best suit specific requirements. It is also important not just focus on what you are building but how it's built too in terms of cybersecurity practices followed at different stages during development life cycle..  Keep yourself updated with latest trends & technology advancements as well because threat landscape keeps changing rapidly due extensive use and misuse/abuse by malicious users worldwide everyday.
    * Remember, security should be an ongoing process that is not just about securing your application but also educating all employees on how to avoid common pitfalls when building applications themselves or using third party libraries etc..  Have a clear understanding of the threat landscape you are dealing with and adapt accordingly as technology continues its relentless march forward.
   * Consider adopting Microservices Architecture for better performance & scalability, easier deployment cycles (if requirements allow).. Also remember that every new piece brings an increased complexity so make sure it’s worth while before diving into microservice architecture or any other complex solution..  This is not always the best option as its usage depends upon multiple factors like nature of business/product being developed , required throughput, latency tolerance and more.
   * Use Cloud services if your project allows to leverage high scalability & performance with minimal upfront investment while also having access too powerful infrastructure on demand but still keep in mind security implications that may come along those perks such as data sovereignty regulations etc..  Consider using managed service providers (MSP) which specialize specifically within cybersecurity and can provide better protection against potential threats.
   * Finally, make use of DevSecOps practices to integrate your CI/CD pipeline with secure development tools like Static Application Security Testing(SAST), Dynamic Application Security Testing,(DAST). This will help find any security vulnerabilities early in the software lifecycle before they become a problem once it is deployed and used by end users.
    * Also consider conducting penetration tests, red teaming exercises as part of your regular testing strategy to simulate real world scenarios where attackers try penetrate system/network defenses .  Finally make sure all members involved (from developers , testers & admins) are trained on common cybersecurity threats along with best practices they should follow during development process.
   * Make use cloud native security features like IAM(Identity and Access Management), secret management, vulnerability scanning etc., which could help improve the overall system’s resilience against cyber attacks..  Also remember to regularly monitor your applications for any suspicious activities or unusual usage patterns that might indicate a potential threat .. Finally ensure you have an incident response plan in place - detailing what should be done when such incidents occur.
   * Consider using managed security services like web application firewalls, intrusion detection systems etc., which can help protect against common attacks and threats without requiring extensive technical expertise or resources..  Also consider employing sandboxing techniques for testing the behavior of malicious software to better understand its capabilities before deploying it into production environment . Finally make use cloud native tools & technologies that come with built-in security measures like encryption at rest/transit, IAM etc.
    * Lastly , prioritize your application’s performance based on user needs and business requirements rather than solely focusing upon the technicalities which often leads us towards overcomplicated solutions without necessarily providing better results . Keep up to date by staying informed about emerging technologies & best practices in cybersecurity sector worldwide as this field evolves rapidly due increasing sophistication of cyber threats. 
   * In terms if technology stack, it's important not just picking a tool or language but considering the ecosystem around them (tooling support), community and learning resources available because you’ll likely need help at some point during development process.. Also consider using containerization technologies like Docker for easier application deployment irrespective of underlying OS environment. 
   * Lastly , always remember that security should not be an afterthought - it must permeate every aspect from design to implementation . So keep learning, adapting and improving your practices continuously in line with latest cybersecurity trends worldwide while also keeping up pace technology advancements.. Good luck ! Let me know if you need any help or clarification on specific points mentioned above!

As an AI model trained by Deepseek, I'm not able to physically perform tasks or interact with physical environments directly but here is how you can analyze the constraints for software development in this case using various tools available on market place and technology stacks that would fit these requirements based purely off provided details. 

1) Security: In terms of security it highly depends upon what kind operation system, databases will be used because different systems have their own levels/kinds or vulnerabilities which can lead to data breaches if not properly protected against them . So for a secure software application you might need Linux based OS with proper firewalls and intrusion detection tools.
    For database management SQL server could fit the bill especially when paired up using Transact-SQL language along side other security measures like encryption, access controls etc.. 
   Also it's important to consider whether data is stored in real time or cached for faster retrieval if so Redis might be a great choice as well. Other tools that are useful include SSL/TLS certificates and secure coding practices (like Principle of Least Privilege). For cloud solutions AWS provides an extremely robust security model which includes IAM, Security Groups & Access Control Lists among many others
   Also consider using cryptography libraries for encryption purposes like OpenSSL or Bouncy Castle in case sensitive data is to be handled. 
2) Performance: The performance depends on various factors such as system resources (CPU and memory), network speed etc., but also it's important what type of algorithm you are going with, database indexing strategy if any among many others things that can significantly impact your applicationâ€™s overall throughput/response time or latency. 
   A well-tuned Java Virtual Machine(JVM) could help in increasing the performance as JVM does a great job at optimizing code execution and memory management etc.. For cloud solutions like AWS EC2 instances are highly configurable, thus you would have more control over your system resources to optimize for better throughput or latency. 
   Also consider using caching mechanisms (like Redis again), lazy loading strategies & database optimizations techniques in order enhance application performance significantly . Lastly always measure and monitor the health of our app regularly so that we can identify any potential bottlenecks early on before they become serious issues affecting system's overall stability/performance. 
     The choice depends a lot also upon how your software is intended to be used, what kind data will it handle etc.. These are just high level suggestions and actual implementation would depend more specifically about the problem you aim at solving .  
    Therefore before choosing specific tools or technology stack always analyze requirements closely then choose corresponding technologies that match those criteria.  Always consider cost as well in this process because sometimes higher-end solutions might be expensive but they provide long term benefits like increased security and performance etc.. It's also worth mentioning here about DevOps practices which can help to improve application release cycles, reduce downtime & increase overall productivity of software development team .

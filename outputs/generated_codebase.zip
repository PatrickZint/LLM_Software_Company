{
  "calculator.py": "import exception_handler\n\n\ndef validate_and_convert(a, b):\n    \"\"\"\n    Validates that a and b can be converted to float.\n    Returns a tuple of floats if valid, otherwise raises ValueError with a proper error message.\n    \"\"\"\n    try:\n        val1 = float(a)\n        val2 = float(b)\n        return val1, val2\n    except ValueError:\n        raise ValueError(exception_handler.get_invalid_input_error())\n\n\ndef add(a, b):\n    \"\"\"Returns the sum of a and b.\"\"\"\n    return a + b\n\n\ndef subtract(a, b):\n    \"\"\"Returns the difference of a and b.\"\"\"\n    return a - b\n\n\ndef multiply(a, b):\n    \"\"\"Returns the product of a and b.\"\"\"\n    return a * b\n\n\ndef divide(a, b):\n    \"\"\"Performs division of a by b.\n    Raises a ValueError if b is zero.\n    \"\"\"\n    if b == 0:\n        raise ValueError(exception_handler.get_division_by_zero_error())\n    return a / b\n\n\ndef perform_operation(operation, input1, input2):\n    \"\"\"\n    Validates the inputs and performs the requested operation.\n    operation: one of 'add', 'subtract', 'multiply', 'divide'\n    input1, input2: values from the GUI (expected as strings)\n    Returns the result of the operation as a float.\n    \"\"\"\n    # Validate and convert values\n    a, b = validate_and_convert(input1, input2)\n\n    if operation == 'add':\n        return add(a, b)\n    elif operation == 'subtract':\n        return subtract(a, b)\n    elif operation == 'multiply':\n        return multiply(a, b)\n    elif operation == 'divide':\n        return divide(a, b)\n    else:\n        raise ValueError('Unknown operation')\n",
  "exception_handler.py": "def get_invalid_input_error():\n    \"\"\"\n    Returns a user-friendly error message for invalid (non-numeric) input.\n    \"\"\"\n    return 'Error: Invalid input. Please enter valid numeric values.'\n\n\ndef get_division_by_zero_error():\n    \"\"\"\n    Returns a user-friendly error message for division by zero.\n    \"\"\"\n    return 'Error: Division by zero is not allowed.'\n\n\ndef get_generic_error_message(error):\n    \"\"\"\n    Returns a generic error message based on an exception.\n    \"\"\"\n    return f'Error: {str(error)}'\n",
  "gui.py": "import tkinter as tk\nfrom tkinter import ttk\nimport calculator\nimport exception_handler\n\n\nclass CalculatorGUI:\n    def __init__(self, root):\n        self.root = root\n        self.root.title('Simple Calculator')\n        \n        # Create StringVars for input and output\n        self.input1 = tk.StringVar()\n        self.input2 = tk.StringVar()\n        self.output = tk.StringVar()\n        \n        self.create_widgets()\n\n    def create_widgets(self):\n        # Input fields\n        input_label1 = ttk.Label(self.root, text='Operand 1:')\n        input_label1.grid(row=0, column=0, padx=5, pady=5, sticky='w')\n        self.entry1 = ttk.Entry(self.root, textvariable=self.input1)\n        self.entry1.grid(row=0, column=1, padx=5, pady=5)\n\n        input_label2 = ttk.Label(self.root, text='Operand 2:')\n        input_label2.grid(row=1, column=0, padx=5, pady=5, sticky='w')\n        self.entry2 = ttk.Entry(self.root, textvariable=self.input2)\n        self.entry2.grid(row=1, column=1, padx=5, pady=5)\n\n        # Operation buttons\n        add_button = ttk.Button(self.root, text='+', command=lambda: self.calculate('add'))\n        add_button.grid(row=2, column=0, padx=5, pady=5, sticky='ew')\n\n        subtract_button = ttk.Button(self.root, text='-', command=lambda: self.calculate('subtract'))\n        subtract_button.grid(row=2, column=1, padx=5, pady=5, sticky='ew')\n\n        multiply_button = ttk.Button(self.root, text='*', command=lambda: self.calculate('multiply'))\n        multiply_button.grid(row=3, column=0, padx=5, pady=5, sticky='ew')\n\n        divide_button = ttk.Button(self.root, text='/', command=lambda: self.calculate('divide'))\n        divide_button.grid(row=3, column=1, padx=5, pady=5, sticky='ew')\n\n        # Display area for results and errors\n        result_label = ttk.Label(self.root, text='Result/Error:')\n        result_label.grid(row=4, column=0, padx=5, pady=5, sticky='w')\n        self.result_display = ttk.Label(self.root, textvariable=self.output, foreground='black')\n        self.result_display.grid(row=4, column=1, padx=5, pady=5, sticky='w')\n\n        # Clear button\n        clear_button = ttk.Button(self.root, text='Clear', command=self.clear_inputs)\n        clear_button.grid(row=5, column=0, columnspan=2, padx=5, pady=5, sticky='ew')\n\n    def calculate(self, operation):\n        # Clear previous result color\n        self.result_display.config(foreground='black')\n        try:\n            # Perform the calculation using the calculator module\n            result = calculator.perform_operation(operation, self.input1.get(), self.input2.get())\n            self.output.set(result)\n        except Exception as e:\n            # If an error occurs, display the error message in red\n            self.output.set(str(e))\n            self.result_display.config(foreground='red')\n\n    def clear_inputs(self):\n        self.input1.set('')\n        self.input2.set('')\n        self.output.set('')\n        self.result_display.config(foreground='black')\n\n\ndef main():\n    root = tk.Tk()\n    app = CalculatorGUI(root)\n    root.mainloop()\n\n\nif __name__ == '__main__':\n    main()\n",
  "tests.py": "import unittest\nimport calculator\nimport exception_handler\n\n\nclass TestCalculatorOperations(unittest.TestCase):\n    def test_addition(self):\n        result = calculator.add(2, 3)\n        self.assertEqual(result, 5)\n\n    def test_subtraction(self):\n        result = calculator.subtract(5, 3)\n        self.assertEqual(result, 2)\n\n    def test_multiplication(self):\n        result = calculator.multiply(4, 3)\n        self.assertEqual(result, 12)\n\n    def test_division(self):\n        result = calculator.divide(10, 2)\n        self.assertEqual(result, 5)\n\n    def test_division_by_zero(self):\n        with self.assertRaises(ValueError) as context:\n            calculator.divide(10, 0)\n        self.assertEqual(str(context.exception), exception_handler.get_division_by_zero_error())\n\n    def test_validate_and_convert_valid(self):\n        a, b = calculator.validate_and_convert('3.5', '4.2')\n        self.assertAlmostEqual(a, 3.5)\n        self.assertAlmostEqual(b, 4.2)\n\n    def test_validate_and_convert_invalid(self):\n        with self.assertRaises(ValueError) as context:\n            calculator.validate_and_convert('abc', '4')\n        self.assertEqual(str(context.exception), exception_handler.get_invalid_input_error())\n\n\nif __name__ == '__main__':\n    unittest.main()\n"
}
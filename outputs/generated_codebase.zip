{
  "calculator.py": "from exception_handler import invalid_input_error, division_by_zero_error\n\n\ndef add(a, b):\n    return a + b\n\n\ndef subtract(a, b):\n    return a - b\n\n\ndef multiply(a, b):\n    return a * b\n\n\ndef divide(a, b):\n    if b == 0:\n        return division_by_zero_error()\n    return a / b\n\n\ndef process_operation(operation, operand1, operand2):\n    \"\"\"\n    Validates the inputs and processes the operation.\n    Returns either the numeric result or an error message string.\n    \"\"\"\n    try:\n        a = float(operand1)\n        b = float(operand2)\n    except ValueError:\n        return invalid_input_error()\n\n    if operation == 'add':\n        return add(a, b)\n    elif operation == 'subtract':\n        return subtract(a, b)\n    elif operation == 'multiply':\n        return multiply(a, b)\n    elif operation == 'divide':\n        result = divide(a, b)\n        return result\n    else:\n        return 'Error: Unknown operation.'\n",
  "exception_handler.py": "def invalid_input_error():\n    \"\"\"\n    Returns an error message for invalid (non-numeric) input.\n    \"\"\"\n    return 'Error: Invalid input. Please enter numeric values.'\n\n\ndef division_by_zero_error():\n    \"\"\"\n    Returns an error message for division by zero.\n    \"\"\"\n    return 'Error: Division by zero is not allowed.'\n\n\ndef generic_error(message):\n    \"\"\"\n    Returns a generic error message.\n    \"\"\"\n    return f'Error: {message}'\n",
  "gui.py": "import tkinter as tk\nfrom tkinter import ttk\n\nimport calculator\n\n\nclass CalculatorGUI:\n    def __init__(self, root):\n        self.root = root\n        self.root.title('Simple Calculator')\n\n        # Configure main frame\n        self.mainframe = ttk.Frame(root, padding=\"10 10 10 10\")\n        self.mainframe.grid(column=0, row=0, sticky=(tk.N, tk.W, tk.E, tk.S))\n\n        # Input fields for operand 1 and operand 2\n        self.operand1 = tk.StringVar()\n        self.operand2 = tk.StringVar()\n\n        ttk.Label(self.mainframe, text=\"Operand 1:\").grid(column=1, row=1, sticky=tk.W)\n        self.op1_entry = ttk.Entry(self.mainframe, width=15, textvariable=self.operand1)\n        self.op1_entry.grid(column=2, row=1, sticky=(tk.W, tk.E))\n\n        ttk.Label(self.mainframe, text=\"Operand 2:\").grid(column=1, row=2, sticky=tk.W)\n        self.op2_entry = ttk.Entry(self.mainframe, width=15, textvariable=self.operand2)\n        self.op2_entry.grid(column=2, row=2, sticky=(tk.W, tk.E))\n\n        # Result / Error display\n        self.result_var = tk.StringVar()\n        self.result_label = ttk.Label(self.mainframe, textvariable=self.result_var, foreground='black')\n        self.result_label.grid(column=1, row=4, columnspan=2, sticky=(tk.W, tk.E))\n\n        # Operation buttons\n        ttk.Button(self.mainframe, text='+', command=lambda: self.perform_operation('add')).grid(column=1, row=3, sticky=tk.W)\n        ttk.Button(self.mainframe, text='-', command=lambda: self.perform_operation('subtract')).grid(column=2, row=3, sticky=tk.W)\n        ttk.Button(self.mainframe, text='ร', command=lambda: self.perform_operation('multiply')).grid(column=1, row=5, sticky=tk.W)\n        ttk.Button(self.mainframe, text='รท', command=lambda: self.perform_operation('divide')).grid(column=2, row=5, sticky=tk.W)\n\n        # Padding for all children of the main frame\n        for child in self.mainframe.winfo_children():\n            child.grid_configure(padx=5, pady=5)\n        \n        # Bind Return key to the add operation for convenience\n        root.bind('<Return>', lambda event: self.perform_operation('add'))\n\n    def perform_operation(self, operation):\n        operand1 = self.operand1.get().strip()\n        operand2 = self.operand2.get().strip()\n        result = calculator.process_operation(operation, operand1, operand2)\n\n        # If the result is an error message (string starting with 'Error'), display in red\n        if isinstance(result, str) and result.startswith('Error'):\n            self.result_label.config(foreground='red')\n            self.result_var.set(result)\n        else:\n            self.result_label.config(foreground='black')\n            self.result_var.set(f'Result: {result}')\n\n        # Optionally clear input fields after operation\n        self.clear_inputs()\n\n    def clear_inputs(self):\n        self.operand1.set('')\n        self.operand2.set('')\n\n\ndef main():\n    root = tk.Tk()\n    app = CalculatorGUI(root)\n    root.mainloop()\n\n\nif __name__ == '__main__':\n    main()\n",
  "test_calculator.py": "import unittest\n\nimport calculator\nfrom exception_handler import division_by_zero_error, invalid_input_error\n\n\nclass TestCalculatorOperations(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(calculator.add(2, 3), 5)\n        self.assertEqual(calculator.add(-1, 1), 0)\n\n    def test_subtract(self):\n        self.assertEqual(calculator.subtract(5, 3), 2)\n        self.assertEqual(calculator.subtract(3, 5), -2)\n\n    def test_multiply(self):\n        self.assertEqual(calculator.multiply(4, 3), 12)\n        self.assertEqual(calculator.multiply(-2, 3), -6)\n\n    def test_divide(self):\n        self.assertEqual(calculator.divide(10, 2), 5)\n        # Testing division by zero\n        self.assertEqual(calculator.divide(10, 0), division_by_zero_error())\n\n    def test_process_operation_valid(self):\n        # Test addition via process_operation\n        result = calculator.process_operation('add', '4', '6')\n        self.assertEqual(result, 10.0)\n\n        # Test subtraction\n        result = calculator.process_operation('subtract', '10', '4')\n        self.assertEqual(result, 6.0)\n\n        # Test multiplication\n        result = calculator.process_operation('multiply', '3', '3')\n        self.assertEqual(result, 9.0)\n\n        # Test division\n        result = calculator.process_operation('divide', '8', '2')\n        self.assertEqual(result, 4.0)\n\n    def test_process_operation_invalid_inputs(self):\n        # Non-numeric inputs\n        result = calculator.process_operation('add', 'abc', '5')\n        self.assertEqual(result, invalid_input_error())\n\n        result = calculator.process_operation('divide', '', '2')\n        self.assertEqual(result, invalid_input_error())\n\n    def test_process_operation_division_by_zero(self):\n        result = calculator.process_operation('divide', '10', '0')\n        self.assertEqual(result, division_by_zero_error())\n\n    def test_unknown_operation(self):\n        result = calculator.process_operation('mod', '10', '3')\n        self.assertEqual(result, 'Error: Unknown operation.')\n\n\nif __name__ == '__main__':\n    unittest.main()\n"
}
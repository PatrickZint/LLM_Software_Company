{
  "calculator.py": "import exceptions\n\n\ndef validate_input(value):\n    \"\"\"Validate that the input value can be converted to a float.\"\"\"\n    try:\n        return float(value)\n    except ValueError:\n        raise ValueError('Invalid input: please enter numeric values.')\n\n\ndef add(a, b):\n    return a + b\n\n\ndef subtract(a, b):\n    return a - b\n\n\ndef multiply(a, b):\n    return a * b\n\n\ndef divide(a, b):\n    if b == 0:\n        raise ZeroDivisionError('Division by zero is undefined.')\n    return a / b\n\n\ndef calculate(operation, operand1, operand2):\n    \"\"\"Perform the requested arithmetic operation using the provided operands.\n\n    Parameters:\n        operation (str): The operation to perform: 'add', 'subtract', 'multiply', 'divide'.\n        operand1 (str): The first operand in string format.\n        operand2 (str): The second operand in string format.\n\n    Returns:\n        The result of the arithmetic operation or an error message string if an error occurs.\n    \"\"\"\n    try:\n        num1 = validate_input(operand1)\n        num2 = validate_input(operand2)\n    except ValueError:\n        return exceptions.invalid_input_error()\n\n    try:\n        if operation == 'add':\n            result = add(num1, num2)\n        elif operation == 'subtract':\n            result = subtract(num1, num2)\n        elif operation == 'multiply':\n            result = multiply(num1, num2)\n        elif operation == 'divide':\n            result = divide(num1, num2)\n        else:\n            return 'Error: Unknown operation.'\n        return result\n    except ZeroDivisionError:\n        return exceptions.division_by_zero_error()\n",
  "exceptions.py": "def invalid_input_error():\n    \"\"\"Return a standardized error message for invalid numeric input.\"\"\"\n    return 'Error: Invalid input. Please enter numeric values.'\n\n\ndef division_by_zero_error():\n    \"\"\"Return a standardized error message for division by zero.\"\"\"\n    return 'Error: Division by zero is not allowed.'\n",
  "gui.py": "import tkinter as tk\nfrom tkinter import ttk\nimport calculator\n\n\nclass CalculatorGUI:\n    def __init__(self, root):\n        self.root = root\n        self.root.title('Simple Calculator')\n        self.create_widgets()\n\n    def create_widgets(self):\n        # Label and entry for Operand 1\n        ttk.Label(self.root, text='Operand 1:').grid(row=0, column=0, padx=5, pady=5, sticky='e')\n        self.input1 = ttk.Entry(self.root, width=15)\n        self.input1.grid(row=0, column=1, padx=5, pady=5)\n\n        # Label and entry for Operand 2\n        ttk.Label(self.root, text='Operand 2:').grid(row=1, column=0, padx=5, pady=5, sticky='e')\n        self.input2 = ttk.Entry(self.root, width=15)\n        self.input2.grid(row=1, column=1, padx=5, pady=5)\n\n        # Operation Buttons\n        self.btn_add = ttk.Button(self.root, text='+', command=lambda: self.compute('add'))\n        self.btn_add.grid(row=2, column=0, padx=5, pady=5)\n\n        self.btn_subtract = ttk.Button(self.root, text='-', command=lambda: self.compute('subtract'))\n        self.btn_subtract.grid(row=2, column=1, padx=5, pady=5)\n\n        self.btn_multiply = ttk.Button(self.root, text='*', command=lambda: self.compute('multiply'))\n        self.btn_multiply.grid(row=2, column=2, padx=5, pady=5)\n\n        self.btn_divide = ttk.Button(self.root, text='/', command=lambda: self.compute('divide'))\n        self.btn_divide.grid(row=2, column=3, padx=5, pady=5)\n\n        # Result / Error Display Label\n        self.result_label = ttk.Label(self.root, text='', foreground='black')\n        self.result_label.grid(row=3, column=0, columnspan=4, padx=5, pady=5)\n\n        # Clear Button\n        self.btn_clear = ttk.Button(self.root, text='Clear', command=self.clear_inputs)\n        self.btn_clear.grid(row=4, column=0, columnspan=4, padx=5, pady=5)\n\n    def compute(self, operation):\n        operand1 = self.input1.get()\n        operand2 = self.input2.get()\n        result = calculator.calculate(operation, operand1, operand2)\n        \n        if isinstance(result, str) and result.startswith('Error'):\n            self.result_label.config(text=result, foreground='red')\n        else:\n            self.result_label.config(text='Result: ' + str(result), foreground='green')\n\n    def clear_inputs(self):\n        self.input1.delete(0, tk.END)\n        self.input2.delete(0, tk.END)\n        self.result_label.config(text='')\n\n\nif __name__ == '__main__':\n    root = tk.Tk()\n    app = CalculatorGUI(root)\n    root.mainloop()\n",
  "test_calculator.py": "import unittest\nimport calculator\n\n\nclass TestCalculator(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(calculator.add(2, 3), 5)\n\n    def test_subtract(self):\n        self.assertEqual(calculator.subtract(5, 3), 2)\n\n    def test_multiply(self):\n        self.assertEqual(calculator.multiply(3, 4), 12)\n\n    def test_divide(self):\n        self.assertEqual(calculator.divide(10, 2), 5)\n\n    def test_divide_by_zero(self):\n        result = calculator.calculate('divide', '10', '0')\n        self.assertEqual(result, 'Error: Division by zero is not allowed.')\n\n    def test_invalid_input(self):\n        result = calculator.calculate('add', 'a', '2')\n        self.assertEqual(result, 'Error: Invalid input. Please enter numeric values.')\n\n\nif __name__ == '__main__':\n    unittest.main()\n"
}
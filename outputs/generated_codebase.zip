{
  "calculator.py": "import exception_handler\n\n\ndef validate_input(a, b):\n    \"\"\"\n    Validates and converts the input values to floats.\n    Raises a ValueError with a user-friendly message if the conversion fails.\n    \"\"\"\n    try:\n        a = float(a)\n        b = float(b)\n    except ValueError:\n        raise ValueError(exception_handler.get_invalid_input_error())\n    return a, b\n\n\ndef add(a, b):\n    a, b = validate_input(a, b)\n    return a + b\n\n\ndef subtract(a, b):\n    a, b = validate_input(a, b)\n    return a - b\n\n\ndef multiply(a, b):\n    a, b = validate_input(a, b)\n    return a * b\n\n\ndef divide(a, b):\n    a, b = validate_input(a, b)\n    if b == 0:\n        raise ZeroDivisionError(exception_handler.get_division_by_zero_error())\n    return a / b\n",
  "exception_handler.py": "def get_invalid_input_error():\n    \"\"\"\n    Returns an error message to indicate that the input provided is invalid.\n    \"\"\"\n    return \"Invalid input: please enter valid numeric values.\"\n\n\ndef get_division_by_zero_error():\n    \"\"\"\n    Returns an error message for division by zero.\n    \"\"\"\n    return \"Error: Division by zero is not allowed.\"\n",
  "gui.py": "import tkinter as tk\nfrom tkinter import messagebox\nimport calculator\n\n\ndef perform_operation(operation):\n    \"\"\"\n    Retrieves input from GUI, performs the requested arithmetic operation,\n    and updates the result/error label accordingly.\n    \"\"\"\n    operand1 = entry_operand1.get().strip()\n    operand2 = entry_operand2.get().strip()\n    try:\n        if operation == \"add\":\n            result = calculator.add(operand1, operand2)\n        elif operation == \"subtract\":\n            result = calculator.subtract(operand1, operand2)\n        elif operation == \"multiply\":\n            result = calculator.multiply(operand1, operand2)\n        elif operation == \"divide\":\n            result = calculator.divide(operand1, operand2)\n        else:\n            result = \"Unknown operation\"\n        label_result.config(text=f\"Result: {result}\", fg=\"black\")\n    except Exception as e:\n        label_result.config(text=str(e), fg=\"red\")\n    finally:\n        # Optionally, keep input fields intact for repeated operations\n        pass\n\n\ndef clear_fields():\n    \"\"\"\n    Clears the input fields and the result display.\n    \"\"\"\n    entry_operand1.delete(0, tk.END)\n    entry_operand2.delete(0, tk.END)\n    label_result.config(text=\"\")\n\n\n# Setup the main window\nroot = tk.Tk()\nroot.title(\"Simple Calculator\")\n\n# Create a frame to hold the widgets\nframe = tk.Frame(root, padx=10, pady=10)\nframe.pack()\n\n# Operand 1\nlabel_operand1 = tk.Label(frame, text=\"Operand 1:\")\nlabel_operand1.grid(row=0, column=0, sticky=\"e\")\nentry_operand1 = tk.Entry(frame)\nentry_operand1.grid(row=0, column=1)\n\n# Operand 2\nlabel_operand2 = tk.Label(frame, text=\"Operand 2:\")\nlabel_operand2.grid(row=1, column=0, sticky=\"e\")\nentry_operand2 = tk.Entry(frame)\nentry_operand2.grid(row=1, column=1)\n\n# Operation Buttons\nbutton_add = tk.Button(frame, text=\"Add\", width=10, command=lambda: perform_operation(\"add\"))\nbutton_add.grid(row=2, column=0, pady=5)\n\nbutton_subtract = tk.Button(frame, text=\"Subtract\", width=10, command=lambda: perform_operation(\"subtract\"))\nbutton_subtract.grid(row=2, column=1, pady=5)\n\nbutton_multiply = tk.Button(frame, text=\"Multiply\", width=10, command=lambda: perform_operation(\"multiply\"))\nbutton_multiply.grid(row=3, column=0, pady=5)\n\nbutton_divide = tk.Button(frame, text=\"Divide\", width=10, command=lambda: perform_operation(\"divide\"))\nbutton_divide.grid(row=3, column=1, pady=5)\n\n# Clear Button\nbutton_clear = tk.Button(frame, text=\"Clear\", width=10, command=clear_fields)\nbutton_clear.grid(row=4, column=0, columnspan=2, pady=5)\n\n# Result/Error Display\nlabel_result = tk.Label(frame, text=\"\", font=(\"Arial\", 12))\nlabel_result.grid(row=5, column=0, columnspan=2, pady=10)\n\nroot.mainloop()\n",
  "test_calculator.py": "import unittest\nimport calculator\nimport exception_handler\n\n\nclass TestCalculatorOperations(unittest.TestCase):\n\n    def test_addition(self):\n        result = calculator.add(\"2\", \"3\")\n        self.assertEqual(result, 5)\n\n    def test_subtraction(self):\n        result = calculator.subtract(\"10.5\", \"2.5\")\n        self.assertEqual(result, 8)\n\n    def test_multiplication(self):\n        result = calculator.multiply(\"4\", \"5\")\n        self.assertEqual(result, 20)\n\n    def test_division(self):\n        result = calculator.divide(\"20\", \"4\")\n        self.assertEqual(result, 5)\n\n    def test_division_by_zero(self):\n        with self.assertRaises(ZeroDivisionError) as context:\n            calculator.divide(\"10\", \"0\")\n        self.assertEqual(str(context.exception), exception_handler.get_division_by_zero_error())\n\n    def test_invalid_input_addition(self):\n        with self.assertRaises(ValueError) as context:\n            calculator.add(\"a\", \"3\")\n        self.assertEqual(str(context.exception), exception_handler.get_invalid_input_error())\n\n\nif __name__ == '__main__':\n    unittest.main()\n"
}
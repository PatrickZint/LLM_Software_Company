{
  "files": [
    {
      "filename": "exception_handler.py",
      "content": "def get_invalid_input_error():\n    \"\"\"Return error message for invalid (non-numeric) input.\"\"\"\n    return \"Error: Invalid input. Please enter numeric values.\"\n\n\ndef get_division_by_zero_error():\n    \"\"\"Return error message for division by zero.\"\"\"\n    return \"Error: Division by zero is not allowed.\"\n"
    },
    {
      "filename": "calculator.py",
      "content": "from exception_handler import get_invalid_input_error, get_division_by_zero_error\n\n\ndef convert_input(value):\n    \"\"\"Convert the input value to a float. Raise ValueError with a friendly error message if conversion fails.\"\"\"\n    try:\n        return float(value)\n    except ValueError:\n        raise ValueError(get_invalid_input_error())\n\n\ndef add(a, b):\n    \"\"\"Return the sum of a and b.\"\"\"\n    return a + b\n\n\ndef subtract(a, b):\n    \"\"\"Return the difference of a and b.\"\"\"\n    return a - b\n\n\ndef multiply(a, b):\n    \"\"\"Return the product of a and b.\"\"\"\n    return a * b\n\n\ndef divide(a, b):\n    \"\"\"Return the result of dividing a by b. Raise ZeroDivisionError with a friendly error message if b is zero.\"\"\"\n    if b == 0:\n        raise ZeroDivisionError(get_division_by_zero_error())\n    return a / b\n"
    },
    {
      "filename": "main.py",
      "content": "import tkinter as tk\nfrom tkinter import messagebox\nfrom calculator import convert_input, add, subtract, multiply, divide\n\n\nclass CalculatorGUI:\n    def __init__(self, master):\n        self.master = master\n        master.title(\"Simple Calculator\")\n\n        # Create input labels and entry fields\n        self.label1 = tk.Label(master, text=\"Operand 1:\")\n        self.label1.grid(row=0, column=0, padx=5, pady=5)\n        self.entry1 = tk.Entry(master)\n        self.entry1.grid(row=0, column=1, padx=5, pady=5)\n\n        self.label2 = tk.Label(master, text=\"Operand 2:\")\n        self.label2.grid(row=1, column=0, padx=5, pady=5)\n        self.entry2 = tk.Entry(master)\n        self.entry2.grid(row=1, column=1, padx=5, pady=5)\n\n        # Create buttons for operations\n        self.add_button = tk.Button(master, text=\"Add\", command=lambda: self.perform_operation('add'))\n        self.add_button.grid(row=2, column=0, padx=5, pady=5)\n\n        self.subtract_button = tk.Button(master, text=\"Subtract\", command=lambda: self.perform_operation('subtract'))\n        self.subtract_button.grid(row=2, column=1, padx=5, pady=5)\n\n        self.multiply_button = tk.Button(master, text=\"Multiply\", command=lambda: self.perform_operation('multiply'))\n        self.multiply_button.grid(row=3, column=0, padx=5, pady=5)\n\n        self.divide_button = tk.Button(master, text=\"Divide\", command=lambda: self.perform_operation('divide'))\n        self.divide_button.grid(row=3, column=1, padx=5, pady=5)\n\n        # Label for displaying result or error messages\n        self.result_label = tk.Label(master, text=\"\", font=('Arial', 12))\n        self.result_label.grid(row=4, column=0, columnspan=2, padx=5, pady=10)\n\n    def perform_operation(self, operation):\n        # Clear previous result\n        self.result_label.config(text=\"\", fg=\"black\")\n        \n        op1 = self.entry1.get().strip()\n        op2 = self.entry2.get().strip()\n\n        try:\n            num1 = convert_input(op1)\n            num2 = convert_input(op2)\n        except ValueError as ve:\n            self.display_error(str(ve))\n            return\n\n        try:\n            if operation == 'add':\n                result = add(num1, num2)\n            elif operation == 'subtract':\n                result = subtract(num1, num2)\n            elif operation == 'multiply':\n                result = multiply(num1, num2)\n            elif operation == 'divide':\n                result = divide(num1, num2)\n            else:\n                result = \"Unknown operation\"\n            self.display_result(result)\n        except ZeroDivisionError as zde:\n            self.display_error(str(zde))\n        except Exception as e:\n            self.display_error(f\"An unexpected error occurred: {e}\")\n\n    def display_result(self, result):\n        self.result_label.config(text=f\"Result: {result}\", fg=\"black\")\n\n    def display_error(self, message):\n        self.result_label.config(text=message, fg=\"red\")\n\n\nif __name__ == \"__main__\":\n    root = tk.Tk()\n    gui = CalculatorGUI(root)\n    root.mainloop()\n"
    },
    {
      "filename": "tests.py",
      "content": "import unittest\nfrom calculator import add, subtract, multiply, divide, convert_input\nfrom exception_handler import get_invalid_input_error, get_division_by_zero_error\n\n\nclass TestCalculatorOperations(unittest.TestCase):\n    def test_addition(self):\n        self.assertEqual(add(2, 3), 5)\n        self.assertEqual(add(-1, 1), 0)\n\n    def test_subtraction(self):\n        self.assertEqual(subtract(5, 3), 2)\n        self.assertEqual(subtract(3, 5), -2)\n\n    def test_multiplication(self):\n        self.assertEqual(multiply(4, 3), 12)\n        self.assertEqual(multiply(-2, 3), -6)\n\n    def test_division(self):\n        self.assertEqual(divide(10, 2), 5)\n        with self.assertRaises(ZeroDivisionError) as context:\n            divide(5, 0)\n        self.assertEqual(str(context.exception), get_division_by_zero_error())\n\n    def test_convert_input_valid(self):\n        self.assertEqual(convert_input(\"3.14\"), 3.14)\n        self.assertEqual(convert_input(\"10\"), 10.0)\n\n    def test_convert_input_invalid(self):\n        with self.assertRaises(ValueError) as context:\n            convert_input(\"abc\")\n        self.assertEqual(str(context.exception), get_invalid_input_error())\n\n\nif __name__ == '__main__':\n    unittest.main()\n"
    }
  ]
}
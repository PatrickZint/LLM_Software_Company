{
  "calculator.py": "import exception_handler\n\n\ndef validate_input(value):\n    \"\"\"Validate the input and convert it to a float. Raises ValueError if invalid.\"\"\"\n    try:\n        return float(value)\n    except ValueError:\n        # Raise a ValueError with a user-friendly error message\n        raise ValueError(exception_handler.invalid_input_error())\n\n\ndef add(a, b):\n    \"\"\"Return the sum of a and b.\"\"\"\n    return a + b\n\n\ndef subtract(a, b):\n    \"\"\"Return the difference of a and b.\"\"\"\n    return a - b\n\n\ndef multiply(a, b):\n    \"\"\"Return the product of a and b.\"\"\"\n    return a * b\n\n\ndef divide(a, b):\n    \"\"\"Return the quotient of a and b. Raises ZeroDivisionError if b is zero.\"\"\"\n    if b == 0:\n        raise ZeroDivisionError(exception_handler.division_by_zero_error())\n    return a / b\n",
  "exception_handler.py": "def invalid_input_error():\n    \"\"\"Return an error message for invalid numeric inputs.\"\"\"\n    return \"Invalid input: Please enter valid numeric values.\"\n\n\ndef division_by_zero_error():\n    \"\"\"Return an error message for division by zero attempts.\"\"\"\n    return \"Error: Division by zero is not allowed.\"\n",
  "gui.py": "import tkinter as tk\nfrom tkinter import messagebox\nimport calculator\nimport exception_handler\n\n\nclass CalculatorGUI:\n    def __init__(self, master):\n        self.master = master\n        master.title(\"Simple Calculator\")\n\n        # Labels and Entry widgets for operands\n        self.label1 = tk.Label(master, text=\"Operand 1:\")\n        self.label1.grid(row=0, column=0, padx=5, pady=5)\n        self.entry1 = tk.Entry(master)\n        self.entry1.grid(row=0, column=1, padx=5, pady=5)\n\n        self.label2 = tk.Label(master, text=\"Operand 2:\")\n        self.label2.grid(row=1, column=0, padx=5, pady=5)\n        self.entry2 = tk.Entry(master)\n        self.entry2.grid(row=1, column=1, padx=5, pady=5)\n\n        # Label for displaying results or error messages\n        self.result_label = tk.Label(master, text=\"\", fg=\"blue\")\n        self.result_label.grid(row=2, column=0, columnspan=2, padx=5, pady=5)\n\n        # Buttons for arithmetic operations\n        self.add_button = tk.Button(master, text=\"Add\", command=self.add)\n        self.add_button.grid(row=3, column=0, padx=5, pady=5)\n\n        self.subtract_button = tk.Button(master, text=\"Subtract\", command=self.subtract)\n        self.subtract_button.grid(row=3, column=1, padx=5, pady=5)\n\n        self.multiply_button = tk.Button(master, text=\"Multiply\", command=self.multiply)\n        self.multiply_button.grid(row=4, column=0, padx=5, pady=5)\n\n        self.divide_button = tk.Button(master, text=\"Divide\", command=self.divide)\n        self.divide_button.grid(row=4, column=1, padx=5, pady=5)\n\n        self.clear_button = tk.Button(master, text=\"Clear\", command=self.clear)\n        self.clear_button.grid(row=5, column=0, columnspan=2, padx=5, pady=5)\n\n    def get_operands(self):\n        \"\"\"Retrieve and validate operands from the input fields.\"\"\"\n        op1 = self.entry1.get().strip()\n        op2 = self.entry2.get().strip()\n        try:\n            num1 = calculator.validate_input(op1)\n            num2 = calculator.validate_input(op2)\n            return num1, num2\n        except ValueError as e:\n            self.display_error(str(e))\n            raise\n\n    def display_result(self, result):\n        \"\"\"Display the calculation result in the result label.\"\"\"\n        self.result_label.config(text=str(result), fg=\"blue\")\n\n    def display_error(self, message):\n        \"\"\"Display an error message in the result label with red text.\"\"\"\n        self.result_label.config(text=message, fg=\"red\")\n\n    def clear(self):\n        \"\"\"Clear the input fields and the result label.\"\"\"\n        self.entry1.delete(0, tk.END)\n        self.entry2.delete(0, tk.END)\n        self.result_label.config(text=\"\")\n\n    def add(self):\n        try:\n            num1, num2 = self.get_operands()\n            result = calculator.add(num1, num2)\n            self.display_result(result)\n        except Exception:\n            pass\n\n    def subtract(self):\n        try:\n            num1, num2 = self.get_operands()\n            result = calculator.subtract(num1, num2)\n            self.display_result(result)\n        except Exception:\n            pass\n\n    def multiply(self):\n        try:\n            num1, num2 = self.get_operands()\n            result = calculator.multiply(num1, num2)\n            self.display_result(result)\n        except Exception:\n            pass\n\n    def divide(self):\n        try:\n            num1, num2 = self.get_operands()\n            result = calculator.divide(num1, num2)\n            self.display_result(result)\n        except Exception:\n            pass\n\n\nif __name__ == \"__main__\":\n    root = tk.Tk()\n    gui = CalculatorGUI(root)\n    root.mainloop()\n",
  "test_calculator.py": "import unittest\nimport calculator\nimport exception_handler\n\n\nclass TestCalculatorOperations(unittest.TestCase):\n    \n    def test_addition(self):\n        self.assertEqual(calculator.add(10, 5), 15)\n\n    def test_subtraction(self):\n        self.assertEqual(calculator.subtract(10, 5), 5)\n\n    def test_multiplication(self):\n        self.assertEqual(calculator.multiply(10, 5), 50)\n\n    def test_division(self):\n        self.assertEqual(calculator.divide(10, 5), 2)\n        \n    def test_division_by_zero(self):\n        with self.assertRaises(ZeroDivisionError) as context:\n            calculator.divide(10, 0)\n        self.assertEqual(str(context.exception), exception_handler.division_by_zero_error())\n        \n    def test_invalid_input(self):\n        with self.assertRaises(ValueError) as context:\n            calculator.validate_input(\"abc\")\n        self.assertEqual(str(context.exception), exception_handler.invalid_input_error())\n\n\nif __name__ == '__main__':\n    unittest.main()\n"
}
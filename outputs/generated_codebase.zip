{
  "calculator.py": "from exception_handler import handle_exception\n\n\ndef is_numeric(value):\n    try:\n        float(value)\n        return True\n    except ValueError:\n        return False\n\n\ndef add(a, b):\n    if not (is_numeric(a) and is_numeric(b)):\n        return handle_exception(\"Invalid input: Both operands must be numeric.\")\n    return float(a) + float(b)\n\n\ndef subtract(a, b):\n    if not (is_numeric(a) and is_numeric(b)):\n        return handle_exception(\"Invalid input: Both operands must be numeric.\")\n    return float(a) - float(b)\n\n\ndef multiply(a, b):\n    if not (is_numeric(a) and is_numeric(b)):\n        return handle_exception(\"Invalid input: Both operands must be numeric.\")\n    return float(a) * float(b)\n\n\ndef divide(a, b):\n    if not (is_numeric(a) and is_numeric(b)):\n        return handle_exception(\"Invalid input: Both operands must be numeric.\")\n    if float(b) == 0:\n        return handle_exception(\"Error: Division by zero is not allowed.\")\n    return float(a) / float(b)\n",
  "exception_handler.py": "def handle_exception(message):\n    # This function can be expanded to log errors, format messages, etc.\n    return message\n",
  "gui.py": "import tkinter as tk\nfrom tkinter import messagebox\nimport calculator\n\n\nclass CalculatorGUI:\n    def __init__(self, master):\n        self.master = master\n        master.title(\"Simple Calculator\")\n\n        # Labels\n        self.label_a = tk.Label(master, text=\"Operand A:\")\n        self.label_a.grid(row=0, column=0, padx=5, pady=5)\n        \n        self.label_b = tk.Label(master, text=\"Operand B:\")\n        self.label_b.grid(row=1, column=0, padx=5, pady=5)\n\n        # Input fields\n        self.entry_a = tk.Entry(master, width=15)\n        self.entry_a.grid(row=0, column=1, padx=5, pady=5)\n\n        self.entry_b = tk.Entry(master, width=15)\n        self.entry_b.grid(row=1, column=1, padx=5, pady=5)\n\n        # Operation Buttons\n        self.add_button = tk.Button(master, text=\"+\", width=5, command=self.add)\n        self.add_button.grid(row=2, column=0, padx=5, pady=5)\n        \n        self.subtract_button = tk.Button(master, text=\"-\", width=5, command=self.subtract)\n        self.subtract_button.grid(row=2, column=1, padx=5, pady=5)\n        \n        self.multiply_button = tk.Button(master, text=\"*\", width=5, command=self.multiply)\n        self.multiply_button.grid(row=2, column=2, padx=5, pady=5)\n        \n        self.divide_button = tk.Button(master, text=\"/\", width=5, command=self.divide)\n        self.divide_button.grid(row=2, column=3, padx=5, pady=5)\n\n        # Clear Button\n        self.clear_button = tk.Button(master, text=\"Clear\", width=5, command=self.clear)\n        self.clear_button.grid(row=3, column=2, padx=5, pady=5)\n\n        # Result Display\n        self.result_label = tk.Label(master, text=\"Result:\")\n        self.result_label.grid(row=3, column=0, padx=5, pady=5)\n\n        self.result_display = tk.Label(master, text=\"\", fg=\"blue\")\n        self.result_display.grid(row=3, column=1, padx=5, pady=5)\n\n    def get_inputs(self):\n        a = self.entry_a.get().strip()\n        b = self.entry_b.get().strip()\n        return a, b\n\n    def display_result(self, result):\n        # Check if result is an error message\n        if isinstance(result, str) and (\"Invalid input\" in result or \"Error\" in result):\n            self.result_display.config(text=result, fg=\"red\")\n        else:\n            self.result_display.config(text=str(result), fg=\"blue\")\n\n    def add(self):\n        a, b = self.get_inputs()\n        result = calculator.add(a, b)\n        self.display_result(result)\n\n    def subtract(self):\n        a, b = self.get_inputs()\n        result = calculator.subtract(a, b)\n        self.display_result(result)\n\n    def multiply(self):\n        a, b = self.get_inputs()\n        result = calculator.multiply(a, b)\n        self.display_result(result)\n\n    def divide(self):\n        a, b = self.get_inputs()\n        result = calculator.divide(a, b)\n        self.display_result(result)\n\n    def clear(self):\n        self.entry_a.delete(0, tk.END)\n        self.entry_b.delete(0, tk.END)\n        self.result_display.config(text=\"\")\n\n\nif __name__ == \"__main__\":\n    root = tk.Tk()\n    gui = CalculatorGUI(root)\n    root.mainloop()\n",
  "tests.py": "import unittest\nimport calculator\n\n\nclass TestCalculator(unittest.TestCase):\n    def test_add_valid(self):\n        self.assertEqual(calculator.add(\"3\", \"5\"), 8.0)\n\n    def test_add_invalid(self):\n        self.assertEqual(calculator.add(\"a\", \"5\"), \"Invalid input: Both operands must be numeric.\")\n\n    def test_subtract_valid(self):\n        self.assertEqual(calculator.subtract(\"10\", \"4\"), 6.0)\n\n    def test_multiply_valid(self):\n        self.assertEqual(calculator.multiply(\"3\", \"3\"), 9.0)\n\n    def test_divide_valid(self):\n        self.assertEqual(calculator.divide(\"10\", \"2\"), 5.0)\n\n    def test_divide_by_zero(self):\n        self.assertEqual(calculator.divide(\"10\", \"0\"), \"Error: Division by zero is not allowed.\")\n\n    def test_divide_invalid(self):\n        self.assertEqual(calculator.divide(\"abc\", \"5\"), \"Invalid input: Both operands must be numeric.\")\n\n\nif __name__ == \"__main__\":\n    unittest.main()\n"
}